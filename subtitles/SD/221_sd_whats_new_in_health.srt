1
00:00:17,551 --> 00:00:24,124
<c.magenta>（Health新特性）</c>


2
00:00:30,597 --> 00:00:32,933
<c.magenta>下午好各位</c>
<c.magenta>感谢你们来到这里</c>


3
00:00:33,000 --> 00:00:35,402
<c.magenta>欢迎来到“Health新特性”</c>


4
00:00:35,469 --> 00:00:36,436
<c.magenta>我叫亚历克萨</c>


5
00:00:36,503 --> 00:00:38,906
<c.magenta>我是名HealthKit团队的</c>
<c.magenta>软件工程师</c>


6
00:00:39,306 --> 00:00:43,243
<c.magenta>作为团队的一员</c>
<c.magenta>我最喜欢的一部分就是能够看到</c>


7
00:00:43,310 --> 00:00:45,846
<c.magenta>科技能够帮助人们改善生活</c>


8
00:00:45,979 --> 00:00:47,414
<c.magenta>就像许多我们的用户一样</c>


9
00:00:47,981 --> 00:00:50,551
<c.magenta>我非常喜欢使用所有那些健身功能</c>


10
00:00:50,617 --> 00:00:52,119
<c.magenta>在Apple Watch上</c>


11
00:00:52,486 --> 00:00:55,889
<c.magenta>每天让我的环闭合</c>
<c.magenta>并且与我的朋友们分享我的活动</c>


12
00:00:55,956 --> 00:00:59,026
<c.magenta>而且集成了你们所开发的</c>
<c.magenta>那些很棒的健身应用之后</c>


13
00:00:59,092 --> 00:01:00,460
<c.magenta>把健身变得更简单了</c>


14
00:01:02,396 --> 00:01:04,197
<c.magenta>许多人还使用科技</c>


15
00:01:04,263 --> 00:01:07,034
<c.magenta>来帮助他们追踪其他的健康组成部分</c>
<c.magenta>像是睡眠</c>


16
00:01:07,234 --> 00:01:11,071
<c.magenta>对于更好地了解睡眠可以帮助你</c>
<c.magenta>为白天做好准备</c>


17
00:01:11,138 --> 00:01:12,606
<c.magenta>而且可以晚上睡个好觉</c>


18
00:01:14,041 --> 00:01:17,344
<c.magenta>不过 我们的许多用户</c>
<c.magenta>还依赖于一些技术</c>


19
00:01:17,411 --> 00:01:19,479
<c.magenta>我们甚至都没有考虑过这些技术</c>


20
00:01:20,314 --> 00:01:23,450
<c.magenta>例如 控制长期的情况 像是糖尿病</c>


21
00:01:24,751 --> 00:01:27,120
<c.magenta>在iOS和watchOS上</c>


22
00:01:27,321 --> 00:01:30,691
<c.magenta>所有这些个人健康数据的家</c>
<c.magenta>就是HealthKit</c>


23
00:01:32,693 --> 00:01:36,330
<c.magenta>我们发现用户很喜欢</c>
<c.magenta>我们的健康生态系统</c>


24
00:01:36,396 --> 00:01:37,931
<c.magenta>通过HealthKit的创新</c>


25
00:01:37,998 --> 00:01:41,368
<c.magenta>你的应用可以立刻享受到这些保证</c>
<c.magenta>像是隐私</c>


26
00:01:41,435 --> 00:01:44,771
<c.magenta>透明度还有控制</c>
<c.magenta>这些都是我们致力于提供给用户的</c>


27
00:01:45,806 --> 00:01:47,341
<c.magenta>所以 在接下来的60分钟里</c>


28
00:01:47,407 --> 00:01:50,077
<c.magenta>我们会看看</c>
<c.magenta>今年我们的SDK有什么新特性</c>


29
00:01:50,143 --> 00:01:52,279
<c.magenta>在iOS 11和watchOS 4中</c>


30
00:01:52,346 --> 00:01:53,814
<c.magenta>用来继续帮助你们创造出</c>


31
00:01:53,881 --> 00:01:56,183
<c.magenta>在Apple平台上的创新健康技术</c>


32
00:01:57,084 --> 00:01:57,918
<c.magenta>让我们开始吧</c>


33
00:01:59,286 --> 00:02:01,121
<c.magenta>首先我们会快速说明下</c>


34
00:02:01,188 --> 00:02:03,390
<c.magenta>今年HealthKit中的</c>
<c.magenta>新数据类型</c>


35
00:02:04,992 --> 00:02:07,895
<c.magenta>在那之后 我们会说一下</c>
<c.magenta>对于锻炼API的一些常规更新</c>


36
00:02:07,961 --> 00:02:10,297
<c.magenta>借以得到出很棒的健身体验</c>


37
00:02:11,798 --> 00:02:15,068
<c.magenta>再接着我们会引入一个新功能</c>
<c.magenta>叫作同步标识符</c>


38
00:02:15,135 --> 00:02:17,671
<c.magenta>它会帮助你们跨设备消除数据</c>


39
00:02:19,373 --> 00:02:21,008
<c.magenta>最后 我们有一些要分享的更新</c>


40
00:02:21,074 --> 00:02:23,477
<c.magenta>是为用户控制糖尿病所提供的支持</c>


41
00:02:25,279 --> 00:02:27,548
<c.magenta>让我们从新的HealthKit类型</c>
<c.magenta>开始说起吧</c>


42
00:02:27,614 --> 00:02:29,249
<c.magenta>如果你之前使用过HealthKit</c>


43
00:02:29,316 --> 00:02:31,418
<c.magenta>你会知道</c>
<c.magenta>我们将所有的个人数据进行分类</c>


44
00:02:31,485 --> 00:02:34,288
<c.magenta>分为许多不同的类型后</c>
<c.magenta>再存入HealthKit</c>


45
00:02:34,354 --> 00:02:36,590
<c.magenta>我们今年要引入几个新的类型</c>


46
00:02:37,491 --> 00:02:39,359
<c.magenta>我会从样本类型开始讲起</c>


47
00:02:39,560 --> 00:02:42,129
<c.magenta>你所存入HealthKit的样本</c>
<c.magenta>就是小片的数据</c>


48
00:02:42,196 --> 00:02:45,332
<c.magenta>该数据有着特定的时间戳和类型</c>


49
00:02:46,567 --> 00:02:50,404
<c.magenta>我们今年的第一个新类型</c>
<c.magenta>叫作HKWorkoutRoute</c>


50
00:02:50,637 --> 00:02:54,942
<c.magenta>锻炼路线可以让你</c>
<c.magenta>保存锻炼中的主机托管地图</c>


51
00:02:55,008 --> 00:02:57,778
<c.magenta>我会在演讲的晚些时候</c>
<c.magenta>再谈关于它的更多细节</c>


52
00:02:59,813 --> 00:03:02,049
<c.magenta>我们还引入了腰围</c>


53
00:03:02,115 --> 00:03:05,519
<c.magenta>这是个类似于身高或者体重的体标</c>


54
00:03:05,586 --> 00:03:08,956
<c.magenta>用户可以随时间推移追踪并</c>
<c.magenta>更好地理解他们身体的变化</c>


55
00:03:11,024 --> 00:03:14,228
<c.magenta>我们今年引入的另一个身体测量指标</c>
<c.magenta>是最大VO2</c>


56
00:03:14,294 --> 00:03:17,698
<c.magenta>最大VO2测量的是氧气的最大吸入率</c>


57
00:03:17,764 --> 00:03:18,966
<c.magenta>在运动峰值的时候</c>


58
00:03:19,299 --> 00:03:22,903
<c.magenta>特别酷的是在watchOS 4上</c>
<c.magenta>Apple Watch</c>


59
00:03:22,970 --> 00:03:27,674
<c.magenta>甚至可以预估特定户外健走</c>
<c.magenta>和跑步的最大VO2值</c>


60
00:03:27,875 --> 00:03:29,843
<c.magenta>因此 有了浏览这项数据的权限后</c>


61
00:03:29,910 --> 00:03:34,615
<c.magenta>你的应用就可以看到由Apple Watch</c>
<c.magenta>所预估的最大VO2值</c>


62
00:03:35,949 --> 00:03:38,619
<c.magenta>最后 就是我们HealthKit中</c>
<c.magenta>需求呼声最大的类型之一</c>


63
00:03:38,685 --> 00:03:40,988
<c.magenta>我们今年引入了胰岛素注入</c>


64
00:03:41,054 --> 00:03:42,956
<c.magenta>我的同事迈克尔会讲解这部分</c>


65
00:03:46,860 --> 00:03:50,230
<c.magenta>我的同事迈克尔会在演讲的晚些时候</c>
<c.magenta>给你们讲解关于它的更多细节</c>


66
00:03:50,664 --> 00:03:52,199
<c.magenta>除了这些样本类型之外</c>


67
00:03:52,266 --> 00:03:55,035
<c.magenta>我们还引入了一些新的锻炼活动类型</c>


68
00:03:55,102 --> 00:03:58,071
<c.magenta>它们将你的用户</c>
<c.magenta>在做的不同锻炼进行了分类</c>


69
00:03:58,205 --> 00:04:02,576
<c.magenta>我们涵盖了其中的很多种</c>
<c.magenta>而且它们也会配置你的锻炼方式</c>


70
00:04:03,844 --> 00:04:06,513
<c.magenta>我们今年引入的第一个</c>
<c.magenta>新锻炼活动类型是太极</c>


71
00:04:06,580 --> 00:04:10,317
<c.magenta>还有混合有氧运动 最后是手骑自行车</c>


72
00:04:10,617 --> 00:04:13,253
<c.magenta>你就可以使用这些新类型来实现</c>
<c.magenta>更多的健身体验</c>


73
00:04:13,320 --> 00:04:14,321
<c.magenta>给你的用户</c>


74
00:04:16,055 --> 00:04:20,060
<c.magenta>除了我们这些新的锻炼活动类型</c>
<c.magenta>我们还有一些常规更新</c>


75
00:04:20,127 --> 00:04:21,195
<c.magenta>是给我们的锻炼API的</c>


76
00:04:21,928 --> 00:04:25,065
<c.magenta>其中有些是依赖于我们秋季发布的新品</c>


77
00:04:25,132 --> 00:04:27,034
<c.magenta>也就是我们发布的</c>
<c.magenta>Apple Watch Series 2</c>


78
00:04:27,100 --> 00:04:30,103
<c.magenta>其中有些是今年在iOS11</c>
<c.magenta>和watchOS 4中新推出的</c>


79
00:04:30,437 --> 00:04:32,472
<c.magenta>我们会谈到一些关于游泳的更新</c>


80
00:04:32,539 --> 00:04:36,777
<c.magenta>我们会讲到新的分段API</c>
<c.magenta>还会介绍一种新的方式</c>


81
00:04:36,844 --> 00:04:38,912
<c.magenta>你的应用可以用它来暂停和恢复锻炼</c>


82
00:04:39,646 --> 00:04:43,150
<c.magenta>去年秋天我们发布了</c>
<c.magenta>Apple Watch Series 2</c>


83
00:04:43,217 --> 00:04:46,386
<c.magenta>人们非常喜欢戴着他们的手表游泳</c>


84
00:04:46,453 --> 00:04:50,057
<c.magenta>你可以在游泳池戴着它</c>
<c.magenta>也可以在海里和湖里</c>


85
00:04:50,257 --> 00:04:53,427
<c.magenta>我要开始谈下一些追踪的类型</c>


86
00:04:53,493 --> 00:04:55,863
<c.magenta>即当你游泳锻炼时</c>
<c.magenta>Apple Watch所做的</c>


87
00:04:55,929 --> 00:04:58,498
<c.magenta>然后再谈下今年的一些新东西</c>


88
00:05:00,000 --> 00:05:02,503
<c.magenta>首先 正如我所说的</c>
<c.magenta>我们已经支持了游泳池</c>


89
00:05:02,569 --> 00:05:03,904
<c.magenta>和开放水域游泳</c>


90
00:05:04,204 --> 00:05:06,640
<c.magenta>对于泳池游泳 你可以配置泳道的长度</c>


91
00:05:06,707 --> 00:05:09,209
<c.magenta>以便得到更准确的锻炼数据</c>


92
00:05:10,777 --> 00:05:13,647
<c.magenta>我们还会自动追踪一些关键的游泳指标</c>


93
00:05:14,014 --> 00:05:18,585
<c.magenta>首先第一个是游程以及泳姿记录</c>


94
00:05:19,119 --> 00:05:20,487
<c.magenta>若你熟悉HealthKit</c>


95
00:05:20,554 --> 00:05:23,657
<c.magenta>你就会注意需要开启一个新的查询</c>
<c.magenta>来追踪相应的样本</c>


96
00:05:23,724 --> 00:05:25,392
<c.magenta>即在锻炼时你感兴趣的样本数据</c>


97
00:05:25,459 --> 00:05:27,895
<c.magenta>例如 用户燃烧的卡路里数</c>


98
00:05:27,961 --> 00:05:30,430
<c.magenta>或者他们的实时心率</c>


99
00:05:30,931 --> 00:05:34,034
<c.magenta>同样地</c>
<c.magenta>这两个指标你也要开启一个新的查询</c>


100
00:05:34,101 --> 00:05:37,471
<c.magenta>在锻炼中进行追踪</c>
<c.magenta>以便你可以给你的用户实时显示</c>


101
00:05:39,206 --> 00:05:41,642
<c.magenta>Apple Watch</c>
<c.magenta>还可以探测单独的圈数</c>


102
00:05:41,708 --> 00:05:43,443
<c.magenta>当用户正在游泳的时候</c>


103
00:05:44,211 --> 00:05:47,314
<c.magenta>另外</c>
<c.magenta>我们甚至可以追踪每圈所用的泳姿</c>


104
00:05:47,381 --> 00:05:49,016
<c.magenta>这很酷 而且可以给出</c>


105
00:05:49,082 --> 00:05:52,352
<c.magenta>锻炼时真正的实时数据</c>


106
00:05:53,754 --> 00:05:56,723
<c.magenta>泳姿探测是被存为元数据的</c>


107
00:05:56,790 --> 00:06:00,827
<c.magenta>包括泳姿计数样本 还有每圈的事件</c>


108
00:06:00,994 --> 00:06:03,330
<c.magenta>我们会看下这是什么样的</c>


109
00:06:04,631 --> 00:06:09,002
<c.magenta>今年在watchOS 4中</c>
<c.magenta>我们还新加入了自动组探测</c>


110
00:06:09,069 --> 00:06:11,605
<c.magenta>也就是HealthKit会探测用户</c>


111
00:06:11,672 --> 00:06:14,441
<c.magenta>持续游泳的时间 并醒目通知给用户</c>


112
00:06:14,775 --> 00:06:17,377
<c.magenta>而且你的应用也可以访问这些信息</c>


113
00:06:18,645 --> 00:06:21,448
<c.magenta>今年watchOS 4新特性还有</c>


114
00:06:22,583 --> 00:06:24,551
<c.magenta>你的应用现在可以开启水锁</c>


115
00:06:24,685 --> 00:06:26,653
<c.magenta>这真的是个很棒的功能</c>


116
00:06:26,720 --> 00:06:30,123
<c.magenta>可以让你的应用忽略一切</c>
<c.magenta>水中的屏幕操作</c>


117
00:06:30,190 --> 00:06:33,026
<c.magenta>这会带来很棒的一致性用户体验</c>


118
00:06:33,360 --> 00:06:35,229
<c.magenta>用户想退出水锁的时候</c>


119
00:06:35,295 --> 00:06:38,232
<c.magenta>只需要扭动他们表上的数字表冠</c>


120
00:06:38,298 --> 00:06:42,102
<c.magenta>它会发生特定的声音来说明</c>
<c.magenta>已经把扬声器里的水排出来了</c>


121
00:06:43,904 --> 00:06:47,574
<c.magenta>现在让我们看一些新的元数据键和值</c>


122
00:06:47,641 --> 00:06:49,576
<c.magenta>它们是在游泳中被引入的</c>


123
00:06:50,310 --> 00:06:52,179
<c.magenta>如我所说 我们有位置类型</c>


124
00:06:52,246 --> 00:06:55,849
<c.magenta>其中包括了泳池 开放水域 还有未知</c>


125
00:06:57,117 --> 00:06:59,853
<c.magenta>我们还有泳姿类型</c>


126
00:06:59,920 --> 00:07:03,390
<c.magenta>包括了常见的泳姿 像是自由泳和仰泳</c>


127
00:07:03,457 --> 00:07:05,926
<c.magenta>还有未知或者混合泳</c>


128
00:07:08,962 --> 00:07:11,131
<c.magenta>假如说你想开发一个游泳应用</c>


129
00:07:11,198 --> 00:07:13,233
<c.magenta>且你想知道如何利用</c>
<c.magenta>HealthKit开始进行开发</c>


130
00:07:13,300 --> 00:07:15,969
<c.magenta>首先第一步就是要配置一个游泳锻炼</c>


131
00:07:16,036 --> 00:07:18,805
<c.magenta>比方说 我们这里做的泳池游泳锻炼</c>


132
00:07:19,106 --> 00:07:22,776
<c.magenta>首先我们要创建</c>
<c.magenta>HKWorkoutConfiguration对象</c>


133
00:07:23,477 --> 00:07:25,145
<c.magenta>接下来 我们要设定它的一些属性</c>


134
00:07:25,212 --> 00:07:27,347
<c.magenta>首先 活动类型是游泳</c>


135
00:07:28,649 --> 00:07:31,752
<c.magenta>游泳位置类型</c>
<c.magenta>我们说了是要做泳池游泳</c>


136
00:07:32,586 --> 00:07:33,687
<c.magenta>然后就是泳道长度</c>


137
00:07:33,754 --> 00:07:36,857
<c.magenta>这里我将HKQuantity里</c>
<c.magenta>的数值设为25码</c>


138
00:07:36,924 --> 00:07:38,792
<c.magenta>这是个常见的泳池长度</c>


139
00:07:39,393 --> 00:07:43,130
<c.magenta>接着我们要通过创建一个会话对象</c>
<c.magenta>来开启我们的会话</c>


140
00:07:43,197 --> 00:07:44,965
<c.magenta>然后将这个对象</c>
<c.magenta>传给healthStore</c>


141
00:07:45,966 --> 00:07:48,769
<c.magenta>首先我们要创建新的锻炼会话</c>


142
00:07:48,836 --> 00:07:50,304
<c.magenta>然后将它传给配置</c>


143
00:07:50,671 --> 00:07:55,108
<c.magenta>你会注意到HKWorkout会话</c>
<c.magenta>的构造器是可以抛出的</c>


144
00:07:55,309 --> 00:07:58,712
<c.magenta>当你传了一个非法的锻炼配置时</c>
<c.magenta>它就会抛出异常</c>


145
00:07:58,846 --> 00:08:02,249
<c.magenta>例如 你想要在开放水域</c>
<c.magenta>游泳中设定泳道长度</c>


146
00:08:02,683 --> 00:08:04,551
<c.magenta>所以请确保你的代码处理了这种情况</c>


147
00:08:05,886 --> 00:08:09,523
<c.magenta>接着我们要把锻炼会话的代理</c>
<c.magenta>设为它自己</c>


148
00:08:09,590 --> 00:08:13,160
<c.magenta>以便我们可以在游泳事件发生时</c>
<c.magenta>收到来自HealthKit的回调函数</c>


149
00:08:14,761 --> 00:08:16,830
<c.magenta>最后我们要真的开始这个会话</c>


150
00:08:16,897 --> 00:08:19,032
<c.magenta>通过调用healthStore</c>
<c.magenta>的start方法</c>


151
00:08:19,099 --> 00:08:21,335
<c.magenta>并传入我们刚刚创建的会话</c>


152
00:08:22,069 --> 00:08:24,638
<c.magenta>很好 现在我们的游泳会话就开始了</c>


153
00:08:24,705 --> 00:08:27,207
<c.magenta>我们可能还想为本次锻炼开启水锁</c>


154
00:08:28,675 --> 00:08:31,678
<c.magenta>一个合适的地方就是在</c>
<c.magenta>我们的锻炼会话状态改变为</c>


155
00:08:31,745 --> 00:08:32,746
<c.magenta>开始运行的时候</c>


156
00:08:32,846 --> 00:08:36,416
<c.magenta>这是因为只有你有个激活的锻炼时</c>
<c.magenta>这个API才会工作</c>


157
00:08:36,482 --> 00:08:40,654
<c.magenta>或者说有个正在运行的位置会话</c>
<c.magenta>并且你是出于前台的话</c>


158
00:08:41,054 --> 00:08:42,155
<c.magenta>让我们看看这个方法</c>


159
00:08:42,222 --> 00:08:45,292
<c.magenta>workout session didchangeTo</c>
<c.magenta>fromState和date</c>


160
00:08:46,827 --> 00:08:49,596
<c.magenta>我们会从fromState</c>
<c.magenta>切换到toState</c>


161
00:08:50,464 --> 00:08:53,700
<c.magenta>在本例中我们感兴趣的是</c>
<c.magenta>从notStarted切换到running</c>


162
00:08:53,767 --> 00:08:55,903
<c.magenta>通过这样我们能知道会话开始了</c>


163
00:08:56,803 --> 00:09:00,140
<c.magenta>而这里我们想</c>
<c.magenta>抓取共享的WatchKit扩展</c>


164
00:09:00,207 --> 00:09:02,376
<c.magenta>然后在它上面调用开启水锁</c>


165
00:09:04,611 --> 00:09:07,981
<c.magenta>我们除了改动游泳数据类型</c>


166
00:09:08,048 --> 00:09:10,684
<c.magenta>还改变了我们的锻炼事件</c>


167
00:09:10,751 --> 00:09:11,785
<c.magenta>来更好地支持游泳功能</c>


168
00:09:11,852 --> 00:09:14,721
<c.magenta>还有更多大体上一致的锻炼体验</c>


169
00:09:15,122 --> 00:09:17,824
<c.magenta>让我们从</c>
<c.magenta>HKWorkoutEvent开始看起</c>


170
00:09:19,393 --> 00:09:22,396
<c.magenta>WorkoutEvents醒目标明了</c>
<c.magenta>你锻炼时的某个特定时间</c>


171
00:09:23,664 --> 00:09:27,935
<c.magenta>它可以用来暂停和恢复锻炼</c>
<c.magenta>还可以记录像是圈数以及标记这些数据</c>


172
00:09:28,001 --> 00:09:31,305
<c.magenta>标记可以是你应用中任何数据的组合</c>


173
00:09:31,371 --> 00:09:33,640
<c.magenta>且你可以把数据存储在事件的元数据中</c>


174
00:09:33,707 --> 00:09:35,676
<c.magenta>你可以选择存储你所需要的数据</c>


175
00:09:37,578 --> 00:09:40,147
<c.magenta>事件是通过HealthKit</c>
<c.magenta>和你的应用共同创建的</c>


176
00:09:40,514 --> 00:09:42,883
<c.magenta>这很关键</c>
<c.magenta>因为HealthKit会创建事件</c>


177
00:09:42,950 --> 00:09:44,651
<c.magenta>并把这些事件马上传给你</c>


178
00:09:44,718 --> 00:09:48,121
<c.magenta>这样你就可得到关于圈数和泳姿的信息</c>


179
00:09:48,188 --> 00:09:51,692
<c.magenta>还有锻炼应用</c>
<c.magenta>通常会有的暂停和恢复功能</c>


180
00:09:53,460 --> 00:09:57,264
<c.magenta>WorkoutEvent</c>
<c.magenta>被存在HKWorkout的一个列表中</c>


181
00:09:57,497 --> 00:09:59,967
<c.magenta>这样你在查询锻炼信息的时候</c>
<c.magenta>就能从列表将其取回了</c>


182
00:10:00,033 --> 00:10:02,769
<c.magenta>或是你从其他应用查看锻炼信息的时候</c>


183
00:10:04,304 --> 00:10:07,107
<c.magenta>另外 锻炼事件会影响锻炼的持续时间</c>


184
00:10:07,474 --> 00:10:10,244
<c.magenta>特别是暂停和恢复事件</c>


185
00:10:10,310 --> 00:10:13,547
<c.magenta>如果说我要跑步10分钟</c>
<c.magenta>并且暂停了1分钟</c>


186
00:10:13,614 --> 00:10:15,382
<c.magenta>HealthKit会发现一个暂停事件</c>


187
00:10:15,449 --> 00:10:17,251
<c.magenta>1分钟后紧接着一个恢复事件</c>


188
00:10:17,317 --> 00:10:21,154
<c.magenta>然后如我们所期望的那样</c>
<c.magenta>计算出总的跑步持续时间为9分钟</c>


189
00:10:22,489 --> 00:10:25,092
<c.magenta>让我们看看如何观察圈数事件</c>


190
00:10:25,158 --> 00:10:26,593
<c.magenta>回到我们的游泳例子中来</c>


191
00:10:28,262 --> 00:10:31,565
<c.magenta>我们有这个方法</c>
<c.magenta>workoutSession和didGenerate event</c>


192
00:10:31,632 --> 00:10:33,267
<c.magenta>HealthKit会在这个方法中传你的事件</c>


193
00:10:33,333 --> 00:10:34,768
<c.magenta>当你进行锻炼的时候</c>


194
00:10:35,869 --> 00:10:38,906
<c.magenta>我们要切换所给的事件类型</c>


195
00:10:39,606 --> 00:10:41,909
<c.magenta>这里我们感兴趣的是圈数</c>


196
00:10:43,443 --> 00:10:46,547
<c.magenta>有了圈数事件后</c>
<c.magenta>我们就可在应用中具体实现某些功能了</c>


197
00:10:46,613 --> 00:10:49,583
<c.magenta>像是计数加一</c>
<c.magenta>我们可以把它实时呈现给用户</c>


198
00:10:51,051 --> 00:10:53,787
<c.magenta>我们还可以从圈数事件中抓取泳姿类型</c>


199
00:10:54,188 --> 00:10:56,223
<c.magenta>泳姿类型是以元数据形式存储的</c>


200
00:10:56,423 --> 00:10:59,826
<c.magenta>我们想要得到关键泳姿的元数据</c>


201
00:10:59,893 --> 00:11:02,396
<c.magenta>然后再实现某些具体功能 像是</c>


202
00:11:02,462 --> 00:11:04,331
<c.magenta>给用户显示当前的泳姿</c>


203
00:11:06,200 --> 00:11:09,169
<c.magenta>如你所见</c>
<c.magenta>你能借此创造出极其详尽的体验</c>


204
00:11:09,236 --> 00:11:12,105
<c.magenta>来让你的用户一抬手腕就很快看到</c>


205
00:11:14,041 --> 00:11:17,978
<c.magenta>我们今年在iOS 11和watchOS 4上</c>
<c.magenta>还有一些新的锻炼事件</c>


206
00:11:19,746 --> 00:11:22,449
<c.magenta>这是我们现有的锻炼类型枚举</c>


207
00:11:23,483 --> 00:11:26,320
<c.magenta>而今年 我们新加入了分段</c>
<c.magenta>暂停和恢复</c>


208
00:11:26,687 --> 00:11:29,323
<c.magenta>这些新类型对于游泳功能</c>
<c.magenta>都有很重要的影响</c>


209
00:11:29,389 --> 00:11:31,992
<c.magenta>不过它们也能用到所有锻炼应用上</c>


210
00:11:33,694 --> 00:11:35,562
<c.magenta>让我们开始看看分段吧</c>


211
00:11:35,629 --> 00:11:37,998
<c.magenta>不是只呈现某个时刻</c>


212
00:11:38,198 --> 00:11:40,801
<c.magenta>分段可以呈现一个时刻</c>
<c.magenta>以及一段持续时间</c>


213
00:11:41,668 --> 00:11:45,305
<c.magenta>这就让我们更新了现有的锻炼事件类</c>


214
00:11:45,372 --> 00:11:47,441
<c.magenta>之前我们有一个日期属性</c>


215
00:11:48,542 --> 00:11:51,378
<c.magenta>我们用一个日期间隔属性将其替换了</c>


216
00:11:51,879 --> 00:11:54,181
<c.magenta>因此对于所有之前存在</c>
<c.magenta>HealthKit的事件来说</c>


217
00:11:54,248 --> 00:11:57,384
<c.magenta>日期就成为了状态间隔的起始时间</c>


218
00:11:57,451 --> 00:11:59,152
<c.magenta>并且其持续时间为0</c>


219
00:11:59,953 --> 00:12:03,423
<c.magenta>而对于分段来说</c>
<c.magenta>你会有起始时间和持续时间</c>


220
00:12:03,490 --> 00:12:06,393
<c.magenta>或者在该日期间隔上的</c>
<c.magenta>起始时间和结束时间</c>


221
00:12:07,461 --> 00:12:09,663
<c.magenta>我想给你们展示一下</c>
<c.magenta>有间隔的时间线是什么样的</c>


222
00:12:09,730 --> 00:12:11,265
<c.magenta>对于一个典型的游泳锻炼</c>


223
00:12:11,331 --> 00:12:13,367
<c.magenta>所有你在应用中获取到的事件</c>


224
00:12:13,433 --> 00:12:15,869
<c.magenta>发生在你的锻炼会话中</c>


225
00:12:17,871 --> 00:12:19,640
<c.magenta>首先让我们开始锻炼</c>


226
00:12:20,741 --> 00:12:22,142
<c.magenta>我们的用户开始游泳了</c>


227
00:12:22,476 --> 00:12:26,180
<c.magenta>这些灰点表示用户游泳的圈数事件</c>


228
00:12:26,480 --> 00:12:28,148
<c.magenta>如果我们查看某个特定的圈数事件</c>


229
00:12:28,215 --> 00:12:30,184
<c.magenta>你会发现事件的类型是圈数</c>


230
00:12:30,717 --> 00:12:34,488
<c.magenta>它有一个日期间隔</c>
<c.magenta>这里它的起始时间为2</c>


231
00:12:35,022 --> 00:12:37,491
<c.magenta>它还有泳姿的元数据</c>


232
00:12:37,558 --> 00:12:39,560
<c.magenta>我们的用户在做的是自由泳</c>


233
00:12:41,361 --> 00:12:44,731
<c.magenta>用户接着游 然后决定将泳姿换成蝶泳</c>


234
00:12:44,798 --> 00:12:46,233
<c.magenta>这会马上反映在</c>


235
00:12:46,300 --> 00:12:48,869
<c.magenta>你应用所接收到的下一个圈数事件中</c>


236
00:12:50,304 --> 00:12:53,240
<c.magenta>然后用户可能决定暂停锻炼</c>


237
00:12:53,307 --> 00:12:55,175
<c.magenta>那么你就会得到一个暂停事件</c>


238
00:12:55,242 --> 00:12:57,644
<c.magenta>在这个例子中</c>
<c.magenta>你不会得到暂停事件的元数据</c>


239
00:12:57,978 --> 00:13:01,381
<c.magenta>而且你的日期间隔</c>
<c.magenta>只有起始时间而没有持续时间</c>


240
00:13:03,250 --> 00:13:07,654
<c.magenta>现在watchOS 4中</c>
<c.magenta>HealthKit会生成自动组数探测</c>


241
00:13:07,721 --> 00:13:09,289
<c.magenta>对于这个特定的游泳锻炼</c>


242
00:13:09,356 --> 00:13:11,925
<c.magenta>还有用户持续游泳的时间</c>


243
00:13:12,092 --> 00:13:16,964
<c.magenta>因此这个分段事件的起始时间为0</c>
<c.magenta>结束时间为3:30</c>


244
00:13:17,030 --> 00:13:18,131
<c.magenta>也就是用户暂停的时间</c>


245
00:13:18,398 --> 00:13:20,767
<c.magenta>并且在本例中它没有任何元数据</c>


246
00:13:22,769 --> 00:13:26,240
<c.magenta>现在用户又恢复了锻炼</c>
<c.magenta>我们收到了相应的事件</c>


247
00:13:26,440 --> 00:13:28,742
<c.magenta>他们又换回了自由泳</c>


248
00:13:29,176 --> 00:13:32,746
<c.magenta>在6:30分这个点</c>
<c.magenta>我们的用户感觉累了</c>


249
00:13:32,813 --> 00:13:35,582
<c.magenta>他们决定在泳池边停下歇会儿</c>


250
00:13:35,649 --> 00:13:37,851
<c.magenta>但是他们忘了暂停锻炼</c>


251
00:13:38,118 --> 00:13:41,054
<c.magenta>不过HealthKit仍然会生成一个事件</c>


252
00:13:41,121 --> 00:13:43,690
<c.magenta>来记录用户持续游泳的时间</c>


253
00:13:44,024 --> 00:13:46,426
<c.magenta>所以分段就是从他们恢复锻炼开始</c>


254
00:13:46,493 --> 00:13:48,462
<c.magenta>到他们主动停止游泳结束</c>


255
00:13:50,063 --> 00:13:53,133
<c.magenta>我们的用户休息好之后又开始游了</c>


256
00:13:53,200 --> 00:13:57,337
<c.magenta>HealthKit从他们又开始游起</c>
<c.magenta>生成了最后一个分段</c>


257
00:13:57,404 --> 00:13:58,839
<c.magenta>一直到锻炼结束</c>


258
00:13:59,239 --> 00:14:02,743
<c.magenta>如你所见 你可以使用这些分段信息</c>
<c.magenta>来创造出非常丰富的游泳体验</c>


259
00:14:02,809 --> 00:14:04,511
<c.magenta>不过你的应用还可以生成其他分段</c>


260
00:14:04,578 --> 00:14:07,681
<c.magenta>而该分段是特别针对于</c>
<c.magenta>你所开发应用的其他锻炼类型的</c>


261
00:14:09,883 --> 00:14:12,452
<c.magenta>我们今年新添加的其他锻炼事件</c>


262
00:14:12,519 --> 00:14:14,121
<c.magenta>就是暂停和恢复请求</c>


263
00:14:14,454 --> 00:14:17,457
<c.magenta>若你用过Apple Watch的锻炼应用</c>
<c.magenta>你可能会熟悉</c>


264
00:14:17,524 --> 00:14:20,827
<c.magenta>同时按住数字表冠和侧边按钮这个操作</c>


265
00:14:20,894 --> 00:14:23,630
<c.magenta>这样无需点击屏幕就能暂停你的锻炼</c>


266
00:14:23,697 --> 00:14:26,700
<c.magenta>而今年 你的应用也可以这么做了</c>


267
00:14:28,035 --> 00:14:31,338
<c.magenta>就是快速按下数字表冠和侧边按钮</c>


268
00:14:32,272 --> 00:14:33,707
<c.magenta>它同样适用于水锁</c>


269
00:14:33,807 --> 00:14:36,844
<c.magenta>这对游泳应用来说很棒</c>


270
00:14:36,910 --> 00:14:39,813
<c.magenta>因为你的用户根本不用点击屏幕</c>


271
00:14:39,880 --> 00:14:43,283
<c.magenta>或者干扰他们锻炼</c>
<c.magenta>他们只需要按下按钮就可以暂停了</c>


272
00:14:45,953 --> 00:14:49,523
<c.magenta>像其他事件一样</c>
<c.magenta>你要在锻炼会话代理中对其进行处理</c>


273
00:14:49,590 --> 00:14:52,860
<c.magenta>不过需要注意的是</c>
<c.magenta>我们不会自动暂停和恢复</c>


274
00:14:52,926 --> 00:14:55,128
<c.magenta>当接收到这个事件的时候</c>


275
00:14:55,195 --> 00:14:57,931
<c.magenta>会实现什么行为实际上取决于你的应用</c>


276
00:14:57,998 --> 00:14:59,266
<c.magenta>调用的是暂停还是恢复</c>


277
00:15:00,100 --> 00:15:03,637
<c.magenta>让我们看下如果开启了这个行为</c>
<c.magenta>看上去是什么样的</c>


278
00:15:05,138 --> 00:15:08,442
<c.magenta>首先我们的用户</c>
<c.magenta>会按下数字表冠和侧边按钮</c>


279
00:15:08,509 --> 00:15:10,143
<c.magenta>来表明他们想要暂停</c>


280
00:15:11,378 --> 00:15:14,147
<c.magenta>接着HealthKit会生成</c>
<c.magenta>一个暂停和恢复请求</c>


281
00:15:15,315 --> 00:15:18,552
<c.magenta>你的应用在锻炼会话代理中</c>
<c.magenta>收到这个请求</c>


282
00:15:18,619 --> 00:15:20,320
<c.magenta>然后可以选择是不是回应它</c>


283
00:15:20,387 --> 00:15:22,222
<c.magenta>这里我们要回应它</c>


284
00:15:23,190 --> 00:15:25,592
<c.magenta>根据我们的状态</c>
<c.magenta>我们会暂停或者恢复</c>


285
00:15:25,893 --> 00:15:27,961
<c.magenta>如果我们正在跑 想暂停</c>


286
00:15:28,028 --> 00:15:30,397
<c.magenta>而如果我们正在暂停 想恢复</c>


287
00:15:31,665 --> 00:15:33,033
<c.magenta>当HealthKit接收到该改变时</c>


288
00:15:33,100 --> 00:15:36,537
<c.magenta>它就会这个暂停或者恢复</c>
<c.magenta>生成一个新的事件</c>


289
00:15:36,837 --> 00:15:39,273
<c.magenta>最后 这个暂停或是恢复事件</c>


290
00:15:39,339 --> 00:15:41,675
<c.magenta>也会被你的锻炼会话代理所接收</c>


291
00:15:42,509 --> 00:15:45,779
<c.magenta>我们觉得这是个不错的</c>
<c.magenta>用来提供持续性体验的功能</c>


292
00:15:45,846 --> 00:15:47,681
<c.magenta>对于使用不同锻炼应用的用户来说</c>


293
00:15:47,748 --> 00:15:50,584
<c.magenta>我们希望你可以采纳并持续使用它</c>


294
00:15:54,555 --> 00:15:58,492
<c.magenta>今年我们引入的另一个令人兴奋</c>
<c.magenta>的新锻炼API</c>


295
00:15:58,559 --> 00:15:59,860
<c.magenta>是锻炼路径</c>


296
00:16:00,060 --> 00:16:02,863
<c.magenta>用户可以用它来追踪锻炼时的位置</c>


297
00:16:02,930 --> 00:16:06,099
<c.magenta>人们很喜欢在用</c>
<c.magenta>Apple Watch Series 2的时候这么做</c>


298
00:16:06,967 --> 00:16:09,503
<c.magenta>人们在进行马拉松长跑时候会用它</c>


299
00:16:09,570 --> 00:16:12,639
<c.magenta>或者是在金门公园慢跑的时候</c>


300
00:16:13,307 --> 00:16:17,077
<c.magenta>让我们看下你的应用</c>
<c.magenta>应该如何从HealthKit中获得这个数据</c>


301
00:16:18,812 --> 00:16:21,915
<c.magenta>我们有一个新的数据类型叫作</c>
<c.magenta>HKWorkoutRouteType</c>


302
00:16:22,916 --> 00:16:26,086
<c.magenta>重要的是这个类型需要额外的授权</c>


303
00:16:26,153 --> 00:16:27,688
<c.magenta>它有两个前提</c>


304
00:16:27,888 --> 00:16:31,925
<c.magenta>首先 即使你已经有了</c>
<c.magenta>从HealthKit读写锻炼数据的权限</c>


305
00:16:31,992 --> 00:16:35,028
<c.magenta>你仍然需要额外读写</c>
<c.magenta>WorkoutRoutes的授权</c>


306
00:16:35,128 --> 00:16:37,731
<c.magenta>除外真正获得用户的位置</c>


307
00:16:37,798 --> 00:16:40,868
<c.magenta>你还要从Core Location</c>
<c.magenta>获得权限或授权</c>


308
00:16:40,934 --> 00:16:42,769
<c.magenta>来查看用户的位置</c>


309
00:16:44,538 --> 00:16:47,641
<c.magenta>HealthKit将WorkoutRoutes作为</c>
<c.magenta>CLLocation的一个数组来进行建模</c>


310
00:16:47,708 --> 00:16:49,243
<c.magenta>也就是Core Location Location</c>


311
00:16:49,510 --> 00:16:52,713
<c.magenta>每个位置信息包括了经纬度</c>
<c.magenta>和其他一些数据</c>


312
00:16:52,779 --> 00:16:55,182
<c.magenta>像是当时在该位置的速度</c>


313
00:16:57,317 --> 00:17:00,153
<c.magenta>值得注意的是</c>
<c.magenta>这些数据集可能会很大</c>


314
00:17:00,220 --> 00:17:03,423
<c.magenta>在马拉松的例子中</c>
<c.magenta>它可能是数千个数据点</c>


315
00:17:03,590 --> 00:17:07,661
<c.magenta>因此我们要引入一个新的查询</c>


316
00:17:07,728 --> 00:17:10,696
<c.magenta>专门为WorkoutRoutes而做</c>
<c.magenta>也就是HKWorkoutRouteQuery</c>


317
00:17:12,499 --> 00:17:15,502
<c.magenta>它会分批返回位置数据</c>
<c.magenta>而不是一次返回全部</c>


318
00:17:15,569 --> 00:17:18,204
<c.magenta>你就不用一次把所有数据都放内存中了</c>


319
00:17:19,640 --> 00:17:21,608
<c.magenta>让我们来看下代码是怎么样的</c>


320
00:17:21,675 --> 00:17:23,410
<c.magenta>用来从HealthKit中</c>
<c.magenta>读取WorkoutRoute</c>


321
00:17:24,711 --> 00:17:26,480
<c.magenta>我们假设已经有某个锻炼</c>


322
00:17:26,547 --> 00:17:28,815
<c.magenta>是我们感兴趣的</c>
<c.magenta>并且被保存成了一个锻炼对象</c>


323
00:17:29,983 --> 00:17:35,055
<c.magenta>首先我们要在HKSeriesType上</c>
<c.magenta>调用WorkoutRoute来创建想要的类型</c>


324
00:17:35,589 --> 00:17:37,291
<c.magenta>然后我们创建一个断言</c>


325
00:17:37,357 --> 00:17:39,760
<c.magenta>给与我们锻炼有关的对象</c>


326
00:17:41,094 --> 00:17:43,797
<c.magenta>接着我们要使用</c>
<c.magenta>HKSampleQuery</c>


327
00:17:43,997 --> 00:17:47,401
<c.magenta>这个现有的查询会返回</c>
<c.magenta>某个特定类型的样本数据</c>


328
00:17:47,501 --> 00:17:49,636
<c.magenta>我们要传入WorkoutRoute类型</c>


329
00:17:49,703 --> 00:17:51,338
<c.magenta>还有锻炼的断言</c>


330
00:17:51,805 --> 00:17:55,776
<c.magenta>我们对于本例中要接收回来的样本数据</c>
<c.magenta>没有任何限制</c>


331
00:17:55,843 --> 00:17:57,678
<c.magenta>我们没有任何的种类描述符</c>


332
00:17:59,313 --> 00:18:01,315
<c.magenta>所以就会返回查询本身</c>


333
00:18:01,381 --> 00:18:04,618
<c.magenta>还有我们感兴趣的样本以及潜在的错误</c>


334
00:18:06,019 --> 00:18:07,521
<c.magenta>我们首先第一步要注意的是</c>


335
00:18:07,588 --> 00:18:10,724
<c.magenta>我们返回的样本</c>
<c.magenta>实际上是HKWorkoutRoutes</c>


336
00:18:12,226 --> 00:18:14,261
<c.magenta>而第二步就是要从</c>


337
00:18:14,328 --> 00:18:16,763
<c.magenta>每个路径查询原始位置数据</c>


338
00:18:18,065 --> 00:18:21,134
<c.magenta>这里新的HKWorkoutRouteQuery</c>
<c.magenta>就会起作用了</c>


339
00:18:21,268 --> 00:18:24,972
<c.magenta>它会接收锻炼路径作为参数</c>
<c.magenta>然后返回该查询</c>


340
00:18:25,372 --> 00:18:26,807
<c.magenta>而原始位置</c>


341
00:18:26,874 --> 00:18:29,743
<c.magenta>是一个用来表明数据</c>
<c.magenta>是否已经分批传送给你的布尔值</c>


342
00:18:29,810 --> 00:18:31,211
<c.magenta>还会指示某个潜在的错误</c>


343
00:18:33,113 --> 00:18:35,215
<c.magenta>这里我们想让应用实现某个特定的功能</c>


344
00:18:35,282 --> 00:18:37,084
<c.magenta>像是将位置数据加到地图上</c>


345
00:18:37,618 --> 00:18:40,420
<c.magenta>要注意的是</c>
<c.magenta>这个代码段可能会被调用好多次</c>


346
00:18:40,487 --> 00:18:42,389
<c.magenta>因为数据是分批返回给你的</c>


347
00:18:43,657 --> 00:18:47,027
<c.magenta>最后 我们通过调用执行查询</c>
<c.magenta>来运行这个方法</c>


348
00:18:47,561 --> 00:18:51,031
<c.magenta>或是将这些查询传</c>
<c.magenta>入healthStore的执行方法</c>


349
00:18:51,098 --> 00:18:52,466
<c.magenta>并调用该方法</c>


350
00:18:53,534 --> 00:18:56,036
<c.magenta>现在让我们看看你的应用是如何</c>


351
00:18:56,103 --> 00:18:58,405
<c.magenta>创建并保存你自己的锻炼路径的</c>


352
00:18:59,239 --> 00:19:00,674
<c.magenta>我们要用到一个叫</c>


353
00:19:00,741 --> 00:19:02,609
<c.magenta>HKWorkoutRouteBuilder的</c>
<c.magenta>编码程序模型</c>


354
00:19:02,676 --> 00:19:06,046
<c.magenta>而这个模型的生命周期就是</c>
<c.magenta>每条路线你都要有一个编码程序对象</c>


355
00:19:06,113 --> 00:19:07,447
<c.magenta>对于你正在追踪的路线来说</c>


356
00:19:09,550 --> 00:19:13,453
<c.magenta>位置数据是异步加入的</c>
<c.magenta>HealthKit会将这些数据根据日期排序</c>


357
00:19:13,520 --> 00:19:15,022
<c.magenta>当这一系列命令完成的时候</c>


358
00:19:15,088 --> 00:19:18,225
<c.magenta>所以你就不需要担心</c>
<c.magenta>你加入数据的顺序了</c>


359
00:19:19,760 --> 00:19:22,329
<c.magenta>还有就是锻炼</c>
<c.magenta>需要在记录路线之前被保存</c>


360
00:19:22,596 --> 00:19:24,831
<c.magenta>让我们看下时间线是什么样的</c>


361
00:19:24,898 --> 00:19:26,433
<c.magenta>假如你有一个锻炼会话</c>


362
00:19:26,500 --> 00:19:29,336
<c.magenta>你想要追踪它的路线</c>
<c.magenta>并把它保存到HealthKit里</c>


363
00:19:29,670 --> 00:19:32,339
<c.magenta>首先我们要创建</c>
<c.magenta>锻炼路径编码程序</c>


364
00:19:34,208 --> 00:19:37,811
<c.magenta>接着如我们所见的</c>
<c.magenta>我们需要开始锻炼会话</c>


365
00:19:39,780 --> 00:19:41,081
<c.magenta>现在锻炼就开始了</c>


366
00:19:42,249 --> 00:19:44,618
<c.magenta>我们还要开始观测位置数据</c>


367
00:19:44,685 --> 00:19:48,155
<c.magenta>你会从Core Location中</c>
<c.magenta>观测到位置数据</c>


368
00:19:48,222 --> 00:19:50,958
<c.magenta>也就是iOS和watchOS上</c>
<c.magenta>的位置框架</c>


369
00:19:52,426 --> 00:19:54,828
<c.magenta>接着你需要将这些位置数据</c>
<c.magenta>加到你的编码程序中</c>


370
00:19:55,596 --> 00:19:56,864
<c.magenta>现在这个进程正在运行</c>


371
00:19:56,930 --> 00:19:59,299
<c.magenta>你需要在锻炼过程中执行它很多次</c>


372
00:20:00,501 --> 00:20:03,704
<c.magenta>最后你需要结束会话并保存本次锻炼</c>


373
00:20:03,770 --> 00:20:06,740
<c.magenta>然后最后一步就是要结束你的锻炼路径</c>


374
00:20:06,807 --> 00:20:08,208
<c.magenta>也就是将它保存到HealthKit中</c>


375
00:20:08,909 --> 00:20:11,011
<c.magenta>让我们看下它的代码是怎么样</c>


376
00:20:12,746 --> 00:20:16,350
<c.magenta>首先你要创建路径编码程序</c>
<c.magenta>然后加入位置数据</c>


377
00:20:16,550 --> 00:20:20,721
<c.magenta>我们创建了编码程序</c>
<c.magenta>传入了healthStore还有device</c>


378
00:20:20,787 --> 00:20:23,357
<c.magenta>在这里 本地设备默认为nil</c>


379
00:20:24,858 --> 00:20:27,494
<c.magenta>然后你要在锻炼进行时加入位置数据</c>


380
00:20:27,561 --> 00:20:30,430
<c.magenta>假设这个代码段被调用了很多次</c>


381
00:20:30,797 --> 00:20:32,900
<c.magenta>这里我调用了一个局部方法</c>


382
00:20:32,966 --> 00:20:36,203
<c.magenta>fetchRecentLocations</c>
<c.magenta>它会给我返回一个CLLocation的列表</c>


383
00:20:36,270 --> 00:20:38,805
<c.magenta>然后将这些位置数据插入到编码程序中</c>


384
00:20:40,007 --> 00:20:43,243
<c.magenta>作为负责任的程序员</c>
<c.magenta>我需要处理所有的错误</c>


385
00:20:44,478 --> 00:20:47,247
<c.magenta>第三步是在锻炼被保存之后</c>


386
00:20:47,314 --> 00:20:48,682
<c.magenta>我们要结束该路线</c>


387
00:20:49,016 --> 00:20:51,919
<c.magenta>它会传入我们已经保存的锻炼对象</c>


388
00:20:51,985 --> 00:20:54,655
<c.magenta>还有我们需要的</c>
<c.magenta>任何其他关于路线的元数据</c>


389
00:20:58,125 --> 00:21:02,429
<c.magenta>接下来我想做个加入锻炼路径的演示</c>
<c.magenta>给你们展示把锻炼路径加到某个应用中</c>


390
00:21:02,596 --> 00:21:06,099
<c.magenta>如果你参加或者上网观看了</c>
<c.magenta>我们去年的演讲</c>


391
00:21:06,166 --> 00:21:09,903
<c.magenta>你就会记得Speedy Sloth</c>
<c.magenta>这个很棒的锻炼应用</c>


392
00:21:09,970 --> 00:21:10,938
<c.magenta>对于爱偷懒的人来说</c>


393
00:21:11,171 --> 00:21:13,507
<c.magenta>现在我们会给它加入位置路径</c>


394
00:21:19,913 --> 00:21:22,249
<c.magenta>我要切换到Xcode</c>
<c.magenta>这里你就能看到</c>


395
00:21:22,316 --> 00:21:23,917
<c.magenta>我已运行了Speedy Sloth</c>


396
00:21:24,318 --> 00:21:28,188
<c.magenta>Speedy Sloth是个能让你配置锻炼的</c>
<c.magenta>WatchKit应用</c>


397
00:21:28,255 --> 00:21:30,824
<c.magenta>运行它就能给你显示一些实时指标</c>


398
00:21:31,058 --> 00:21:33,160
<c.magenta>并且它会把锻炼保存到</c>
<c.magenta>HealthKit里</c>


399
00:21:33,894 --> 00:21:35,762
<c.magenta>我先运行一下</c>
<c.magenta>Speedy Sloth</c>


400
00:21:35,829 --> 00:21:38,065
<c.magenta>这样你们就知道它现在是什么样子了</c>


401
00:21:38,332 --> 00:21:41,168
<c.magenta>你会发现我们在追踪锻炼的持续时间</c>


402
00:21:41,268 --> 00:21:43,470
<c.magenta>我可以暂停或者恢复</c>


403
00:21:44,304 --> 00:21:48,375
<c.magenta>并且我们随锻炼进行追踪</c>
<c.magenta>你当前的总指标数据</c>


404
00:21:48,742 --> 00:21:51,745
<c.magenta>我们这里有卡路里和里程数据</c>


405
00:21:53,413 --> 00:21:54,648
<c.magenta>现在我停止锻炼</c>


406
00:21:55,716 --> 00:21:57,751
<c.magenta>我们就能看到关于锻炼的总结信息</c>


407
00:21:58,919 --> 00:22:00,354
<c.magenta>现在切换到Xcode</c>


408
00:22:00,420 --> 00:22:02,689
<c.magenta>这里我有</c>
<c.magenta>一个叫healthStoreManager的类</c>


409
00:22:02,923 --> 00:22:06,894
<c.magenta>这个类会处理我们所有与</c>
<c.magenta>HKhealthStore的交互</c>


410
00:22:06,960 --> 00:22:09,096
<c.magenta>也就是从HealthKit</c>
<c.magenta>读取数据或是将数据存入</c>


411
00:22:10,564 --> 00:22:11,865
<c.magenta>我首先要做的是</c>


412
00:22:16,069 --> 00:22:19,273
<c.magenta>实现CLLocation管理代理协议</c>


413
00:22:19,439 --> 00:22:22,843
<c.magenta>它能让我从Core Location</c>
<c.magenta>接收位置数据</c>


414
00:22:25,646 --> 00:22:29,349
<c.magenta>我需要一些属性来追踪这些位置</c>


415
00:22:30,517 --> 00:22:32,886
<c.magenta>第一个属性是</c>


416
00:22:32,953 --> 00:22:35,489
<c.magenta>我们刚才说过的</c>
<c.magenta>HKWorkoutRouteBuilder</c>


417
00:22:36,590 --> 00:22:39,226
<c.magenta>接下来我还需要一个位置管理器</c>


418
00:22:39,293 --> 00:22:42,896
<c.magenta>它来自于Core Location</c>
<c.magenta>你会通过它来接收更新</c>


419
00:22:45,732 --> 00:22:48,802
<c.magenta>现在我想开始积累位置数据了</c>


420
00:22:49,303 --> 00:22:52,005
<c.magenta>我们有startAccumulatingData</c>
<c.magenta>这个方法</c>


421
00:22:52,272 --> 00:22:55,309
<c.magenta>它在我们锻炼会话的状态</c>
<c.magenta>发生改变的时候被调用</c>


422
00:22:55,375 --> 00:22:56,910
<c.magenta>从未开始到开始锻炼</c>


423
00:22:57,411 --> 00:22:59,313
<c.magenta>你们可以看到我已经用了这个地方</c>


424
00:22:59,546 --> 00:23:01,782
<c.magenta>来开始行走并运行查询</c>


425
00:23:01,849 --> 00:23:05,619
<c.magenta>也就是更新距离数据的地方</c>


426
00:23:05,853 --> 00:23:09,056
<c.magenta>还有主动燃烧能量查询</c>


427
00:23:09,122 --> 00:23:11,391
<c.magenta>也就是显示卡路里数的地方</c>


428
00:23:11,458 --> 00:23:16,163
<c.magenta>在这里开始积累位置数据也挺不错</c>


429
00:23:18,265 --> 00:23:21,602
<c.magenta>这里我有一个新方法 叫作</c>
<c.magenta>startAccumulatingLocationData</c>


430
00:23:25,372 --> 00:23:27,508
<c.magenta>我会把实现方法加到这里</c>


431
00:23:29,409 --> 00:23:33,680
<c.magenta>首先 我要使用guard语句</c>
<c.magenta>来开启定位服务</c>


432
00:23:33,747 --> 00:23:34,681
<c.magenta>否则就返回</c>


433
00:23:36,383 --> 00:23:39,319
<c.magenta>然后我要创建一个</c>
<c.magenta>CLLocationManager对象</c>


434
00:23:40,220 --> 00:23:42,856
<c.magenta>我要把对象的代理设为自己</c>


435
00:23:42,923 --> 00:23:46,126
<c.magenta>以便我可以接收到</c>
<c.magenta>即将到来的位置数据的回调函数</c>


436
00:23:48,462 --> 00:23:52,699
<c.magenta>我要把desiredAccuracy</c>
<c.magenta>设为最高精确度</c>


437
00:23:52,933 --> 00:23:56,069
<c.magenta>因为我们要把数据显示在地图上</c>
<c.magenta>所以这是个不错的主意</c>


438
00:23:56,136 --> 00:23:59,573
<c.magenta>我们想把尽可能准确的数据显示给用户</c>


439
00:24:02,009 --> 00:24:05,179
<c.magenta>接着我要把</c>
<c.magenta>allowsBackgroundUpdates设为真</c>


440
00:24:05,579 --> 00:24:07,781
<c.magenta>这样我们就可以继续接收位置信息</c>


441
00:24:07,848 --> 00:24:09,149
<c.magenta>即使当我们处于后台的时候</c>


442
00:24:09,349 --> 00:24:10,884
<c.magenta>为了使其正常工作</c>


443
00:24:10,951 --> 00:24:13,654
<c.magenta>我们还需在info.keylist中</c>
<c.magenta>设置一些键值</c>


444
00:24:13,720 --> 00:24:15,489
<c.magenta>我不会在这演示</c>


445
00:24:15,556 --> 00:24:18,692
<c.magenta>不过你们可以把Speedy Sloth</c>
<c.magenta>当成个例子来看看</c>


446
00:24:18,759 --> 00:24:20,894
<c.magenta>在演讲结束的时候</c>
<c.magenta>我会把它的网址给你们</c>


447
00:24:22,963 --> 00:24:27,000
<c.magenta>最后 在Core Location端</c>
<c.magenta>我想开始更新位置信息了</c>


448
00:24:27,968 --> 00:24:29,937
<c.magenta>在HealthKit端 我只需要</c>


449
00:24:30,003 --> 00:24:32,940
<c.magenta>实例化我的</c>
<c.magenta>HKWorkoutRouteBuilder</c>


450
00:24:33,040 --> 00:24:36,443
<c.magenta>传入healthStore变量</c>
<c.magenta>也就是HKhealthStore</c>


451
00:24:36,844 --> 00:24:38,679
<c.magenta>这里同样将设备设为nil</c>


452
00:24:40,113 --> 00:24:40,948
<c.magenta>不错</c>


453
00:24:41,081 --> 00:24:44,117
<c.magenta>现在所有我们需要用来</c>
<c.magenta>追踪位置信息的变量都有了</c>


454
00:24:44,184 --> 00:24:45,552
<c.magenta>我们把所有东西都设置好了</c>


455
00:24:45,619 --> 00:24:48,755
<c.magenta>现在我们需要在接收到这些位置信息时</c>
<c.magenta>对其进行处理</c>


456
00:24:49,623 --> 00:24:50,557
<c.magenta>为了实现这一点</c>


457
00:24:53,026 --> 00:24:56,930
<c.magenta>我们需要实现Core Location</c>
<c.magenta>Manager Delegate的这个方法</c>


458
00:24:56,997 --> 00:24:59,700
<c.magenta>locationManager还有</c>
<c.magenta>didUpdateLocations</c>


459
00:25:00,267 --> 00:25:02,970
<c.magenta>此方法就如同管理器对象</c>
<c.magenta>本身一样被传递</c>


460
00:25:03,036 --> 00:25:05,906
<c.magenta>还有CLLocation的列表</c>


461
00:25:07,908 --> 00:25:10,711
<c.magenta>首先我要过滤接收到的位置信息</c>


462
00:25:11,311 --> 00:25:14,147
<c.magenta>要不要这么做取决于</c>
<c.magenta>你的应用是做什么的</c>


463
00:25:14,214 --> 00:25:16,583
<c.magenta>这里我要实现一个简单的过滤器</c>


464
00:25:16,984 --> 00:25:19,686
<c.magenta>在某些情况下 你可能要实现别的功能</c>
<c.magenta>像是使路径更平滑</c>


465
00:25:19,753 --> 00:25:21,922
<c.magenta>不过在这里</c>
<c.magenta>我就实现一个简单的过滤器</c>


466
00:25:22,322 --> 00:25:24,558
<c.magenta>我所检查的是水平精确度</c>


467
00:25:24,625 --> 00:25:27,227
<c.magenta>小于等于附近的10米范围</c>


468
00:25:28,262 --> 00:25:30,364
<c.magenta>这么做很重要 因为即便我们在</c>


469
00:25:30,430 --> 00:25:33,000
<c.magenta>Core Location管理器上</c>
<c.magenta>设定了想要的精确度</c>


470
00:25:33,066 --> 00:25:34,401
<c.magenta>还是不能保证一定能实现</c>


471
00:25:36,203 --> 00:25:39,206
<c.magenta>接下来我要检查过滤器位置信息</c>
<c.magenta>是非空的</c>


472
00:25:39,273 --> 00:25:40,207
<c.magenta>否则就返回</c>


473
00:25:43,177 --> 00:25:47,948
<c.magenta>最后我要将这个数据插入到</c>
<c.magenta>WorkoutRouteBuilder</c>


474
00:25:48,015 --> 00:25:49,683
<c.magenta>传入过滤好的位置信息</c>


475
00:25:49,750 --> 00:25:53,086
<c.magenta>然后成功地回传 还有报错</c>


476
00:25:53,520 --> 00:25:56,423
<c.magenta>如果没有回传成功</c>
<c.magenta>我会把错误打印在这里</c>


477
00:25:58,125 --> 00:26:01,261
<c.magenta>不错 现在我们的锻炼会话</c>
<c.magenta>在正常运行着</c>


478
00:26:01,328 --> 00:26:03,597
<c.magenta>我们从Core Location</c>
<c.magenta>接收到了位置信息</c>


479
00:26:03,664 --> 00:26:05,465
<c.magenta>然后把它们插入到构造器中</c>


480
00:26:05,532 --> 00:26:07,534
<c.magenta>现在我们要确保完成收尾工作</c>


481
00:26:07,601 --> 00:26:09,570
<c.magenta>在用户结束了锻炼之后</c>


482
00:26:11,638 --> 00:26:13,640
<c.magenta>stopAccumulatingData</c>
<c.magenta>这个方法</c>


483
00:26:13,707 --> 00:26:16,610
<c.magenta>会在锻炼会话状态</c>
<c.magenta>改变的时候被调用</c>


484
00:26:16,677 --> 00:26:21,215
<c.magenta>在本例中 当装填从运行中或者暂停</c>
<c.magenta>变成结束时</c>


485
00:26:22,182 --> 00:26:25,385
<c.magenta>这里是我刚才提到过的</c>
<c.magenta>healthStore查询</c>


486
00:26:25,452 --> 00:26:28,555
<c.magenta>我们要将其移除</c>
<c.magenta>还有那些活动的查询</c>


487
00:26:29,156 --> 00:26:33,260
<c.magenta>我还要在这停止接收位置更新</c>


488
00:26:33,427 --> 00:26:37,497
<c.magenta>我只需在CLLocationManager上</c>
<c.magenta>调用stopUpdatingLocation这个方法</c>


489
00:26:39,399 --> 00:26:43,637
<c.magenta>最后一步就时将此数据</c>
<c.magenta>保存到HealthKit</c>


490
00:26:44,505 --> 00:26:46,707
<c.magenta>这里我有saveWorkout</c>
<c.magenta>这个方法</c>


491
00:26:48,175 --> 00:26:51,245
<c.magenta>你可以发现它传入了会话</c>
<c.magenta>开始和结束时间</c>


492
00:26:51,745 --> 00:26:55,616
<c.magenta>首先我要配置一些</c>
<c.magenta>用来保存锻炼的元数据</c>


493
00:26:56,750 --> 00:27:00,120
<c.magenta>在本例中 我会检查位置数据类型</c>


494
00:27:00,187 --> 00:27:03,957
<c.magenta>是室内</c>
<c.magenta>那么就把元数据室内的键值设成该值</c>


495
00:27:06,226 --> 00:27:08,529
<c.magenta>现在我要创建一个锻炼对象</c>


496
00:27:08,595 --> 00:27:12,065
<c.magenta>里面有来自于锻炼配置的活动类型</c>


497
00:27:12,866 --> 00:27:14,067
<c.magenta>开始和结束时间</c>


498
00:27:14,668 --> 00:27:17,971
<c.magenta>我保存在Speedy Sloth里</c>
<c.magenta>的锻炼事件列表</c>


499
00:27:18,505 --> 00:27:21,375
<c.magenta>燃烧的总能量 总里程</c>


500
00:27:21,441 --> 00:27:23,443
<c.magenta>还有我刚刚创建的元数据</c>


501
00:27:25,479 --> 00:27:28,115
<c.magenta>最后我要保存这个锻炼</c>


502
00:27:28,282 --> 00:27:30,017
<c.magenta>如果成功保存了此锻炼</c>


503
00:27:30,083 --> 00:27:32,653
<c.magenta>你就会发现我们</c>
<c.magenta>已经将样本添加到锻炼中了</c>


504
00:27:32,719 --> 00:27:35,889
<c.magenta>这会连接那些距离和卡路里样本</c>


505
00:27:35,956 --> 00:27:36,990
<c.magenta>到锻炼中去</c>


506
00:27:37,224 --> 00:27:39,826
<c.magenta>在这里结束锻炼路径也是个不错的选择</c>


507
00:27:43,263 --> 00:27:45,465
<c.magenta>我会把这段代码加到这里</c>


508
00:27:46,500 --> 00:27:48,402
<c.magenta>它会调用构造器上的</c>
<c.magenta>finishRoute方法</c>


509
00:27:48,468 --> 00:27:52,606
<c.magenta>传入锻炼 还有路径本身的无元数据</c>


510
00:27:53,740 --> 00:27:56,510
<c.magenta>最后 就是检查是否会出现错误</c>


511
00:27:57,611 --> 00:27:59,379
<c.magenta>让我们运行一下它</c>


512
00:28:12,626 --> 00:28:14,595
<c.magenta>你会发现在这个演示中没有出现</c>


513
00:28:14,661 --> 00:28:17,598
<c.magenta>要求接收HealthKit类型的授权</c>


514
00:28:17,664 --> 00:28:20,267
<c.magenta>因为我已经在应用的</c>
<c.magenta>iOS组件中实现了</c>


515
00:28:20,334 --> 00:28:23,170
<c.magenta>请你们也看下我们的示例代码</c>
<c.magenta>是如何实现的</c>


516
00:28:24,004 --> 00:28:26,940
<c.magenta>现在我们开始另一个户外健走锻炼</c>


517
00:28:27,341 --> 00:28:29,409
<c.magenta>同样可以看到我们的追踪记录</c>


518
00:28:29,476 --> 00:28:32,980
<c.magenta>也就是持续时间</c>
<c.magenta>还有接下来的卡路里和米数</c>


519
00:28:33,180 --> 00:28:36,750
<c.magenta>如果碰到了一个很酷的偷懒者</c>
<c.magenta>我们就可以做一个标记</c>


520
00:28:37,985 --> 00:28:41,588
<c.magenta>最后我们结束了锻炼</c>
<c.magenta>就可以看到锻炼总结</c>


521
00:28:43,390 --> 00:28:47,027
<c.magenta>然后打开HealthKit</c>
<c.magenta>你就能看到数据被保存了</c>


522
00:28:47,294 --> 00:28:48,929
<c.magenta>打开Health应用后</c>


523
00:28:51,465 --> 00:28:53,634
<c.magenta>我们就能看见一个锻炼列表</c>


524
00:28:55,135 --> 00:28:58,972
<c.magenta>而最新的一个</c>
<c.magenta>就是我们刚保存的锻炼路径</c>


525
00:28:59,806 --> 00:29:02,576
<c.magenta>点击进入就可以看到地图视图</c>


526
00:29:03,644 --> 00:29:06,113
<c.magenta>其他可以接入WorkoutRoute的应用</c>


527
00:29:06,180 --> 00:29:08,615
<c.magenta>也能接收并分析该数据</c>


528
00:29:08,682 --> 00:29:10,617
<c.magenta>或者随他们需要去实现其他功能</c>


529
00:29:13,320 --> 00:29:14,555
<c.magenta>你可以很简单</c>


530
00:29:14,621 --> 00:29:17,524
<c.magenta>就把WorkoutRoutes</c>
<c.magenta>加入到你现有的应用中</c>


531
00:29:17,591 --> 00:29:19,426
<c.magenta>让我切换回幻灯片</c>


532
00:29:22,262 --> 00:29:24,464
<c.magenta>我想总结下刚才都讲过了什么</c>


533
00:29:24,798 --> 00:29:28,101
<c.magenta>首先我实现了</c>
<c.magenta>CLLocationManager代理协议</c>


534
00:29:28,168 --> 00:29:30,704
<c.magenta>我介绍了一些用来追踪状态的变量</c>


535
00:29:30,771 --> 00:29:33,207
<c.magenta>有的来自于HealthKit</c>
<c.magenta>有的来自于Core Location</c>


536
00:29:33,607 --> 00:29:35,542
<c.magenta>我设置了Location Manager</c>


537
00:29:35,709 --> 00:29:38,745
<c.magenta>我保证了将得到的位置数据插入</c>


538
00:29:38,812 --> 00:29:42,916
<c.magenta>并且Location Manager将更新</c>
<c.magenta>WorkoutRouteBuilder里的位置信息</c>


539
00:29:43,350 --> 00:29:46,053
<c.magenta>在结束锻炼的时候要停止更新位置信息</c>


540
00:29:46,386 --> 00:29:50,591
<c.magenta>最后保存完锻炼 我结束了锻炼路径</c>


541
00:29:52,426 --> 00:29:54,795
<c.magenta>下面我会把时间</c>
<c.magenta>交给我的同事迈克尔</c>


542
00:29:54,862 --> 00:29:57,364
<c.magenta>他会给你们介绍一个叫</c>
<c.magenta>同步标识符的新功能</c>


543
00:29:57,431 --> 00:29:58,365
<c.magenta>谢谢</c>


544
00:30:06,406 --> 00:30:07,341
<c.magenta>谢谢 亚历克萨</c>


545
00:30:07,574 --> 00:30:10,310
<c.magenta>大家好 我叫迈克尔</c>
<c.magenta>我是名iOS软件工程师</c>


546
00:30:10,377 --> 00:30:11,445
<c.magenta>来自HealthKit团队</c>


547
00:30:12,679 --> 00:30:14,982
<c.magenta>如今我们的用户都会有超过一台设备</c>


548
00:30:15,048 --> 00:30:16,583
<c.magenta>像是手表和手机</c>


549
00:30:17,751 --> 00:30:19,620
<c.magenta>我知道有一点对你们很重要</c>


550
00:30:19,686 --> 00:30:23,590
<c.magenta>就是你的健康应用数据</c>
<c.magenta>在所有设备上都保持一致</c>


551
00:30:23,657 --> 00:30:25,826
<c.magenta>有时候这是很难实现的</c>


552
00:30:27,895 --> 00:30:30,764
<c.magenta>有时候我们想在一台设备上加个样本</c>


553
00:30:30,831 --> 00:30:32,900
<c.magenta>然后在另一台设备上也加个样本</c>


554
00:30:32,966 --> 00:30:36,403
<c.magenta>然后让这些样本同步</c>
<c.magenta>有时候这会非常复杂</c>


555
00:30:36,837 --> 00:30:40,974
<c.magenta>在iOS 11和watchOS 4中</c>
<c.magenta>我们引入了同步标识符</c>


556
00:30:41,542 --> 00:30:45,479
<c.magenta>同步标识符能让你辨识</c>
<c.magenta>HealthKit里的一个样本</c>


557
00:30:45,546 --> 00:30:47,514
<c.magenta>无论是在你的哪台设备上</c>


558
00:30:49,583 --> 00:30:52,085
<c.magenta>为了实现这点</c>
<c.magenta>我们加入了两个新的元数据键值</c>


559
00:30:52,252 --> 00:30:56,723
<c.magenta>它们是HKMetadataKeySyncIdentifier</c>
<c.magenta>以及HKMetadataKeySyncVersion</c>


560
00:30:58,225 --> 00:31:00,294
<c.magenta>同步标识符可以是任意字符串</c>


561
00:31:00,360 --> 00:31:05,232
<c.magenta>UUID字符串表示</c>
<c.magenta>或者是后端数据库的主键</c>


562
00:31:06,633 --> 00:31:08,669
<c.magenta>同步版本可以是任意数字</c>


563
00:31:09,636 --> 00:31:13,574
<c.magenta>HealthKit会使用同步版本</c>
<c.magenta>来替你解决版本冲突问题</c>


564
00:31:14,174 --> 00:31:16,043
<c.magenta>当你将某个样本存入HealthKit时</c>


565
00:31:16,109 --> 00:31:19,346
<c.magenta>首先它会查找符合同步标识符的</c>
<c.magenta>现有样本</c>


566
00:31:19,613 --> 00:31:22,049
<c.magenta>如果找到了 它就会比较版本号</c>


567
00:31:22,449 --> 00:31:26,220
<c.magenta>如果你的新样本有更高的版本号</c>
<c.magenta>HealthKit就会删除原来的样本</c>


568
00:31:26,286 --> 00:31:29,022
<c.magenta>然后将你的新样本存入替代旧样本</c>


569
00:31:29,523 --> 00:31:31,225
<c.magenta>如果你要保存的样本比原有样</c>
<c.magenta>本的版本号低</c>


570
00:31:31,291 --> 00:31:32,926
<c.magenta>HealthKit会忽略这个新样本</c>


571
00:31:35,696 --> 00:31:38,632
<c.magenta>你必须同时使用这两种键值</c>
<c.magenta>来实现这一功能</c>


572
00:31:39,733 --> 00:31:44,271
<c.magenta>这个元数据适用于任何HK对象</c>
<c.magenta>像是HKSample或者HKWorkout</c>


573
00:31:46,006 --> 00:31:49,376
<c.magenta>另外需要注意的是 它受限于你的来源</c>


574
00:31:49,610 --> 00:31:53,013
<c.magenta>因此 只有你的应用可以</c>
<c.magenta>覆盖你所插入的样本</c>


575
00:31:58,118 --> 00:32:00,320
<c.magenta>同步标识符可以非常灵活地</c>


576
00:32:00,387 --> 00:32:01,955
<c.magenta>让你管理数据</c>


577
00:32:03,390 --> 00:32:05,492
<c.magenta>仅靠这两个元数据键</c>


578
00:32:05,559 --> 00:32:08,629
<c.magenta>你就可以确保</c>
<c.magenta>在所有设备上你的样本都是唯一的</c>


579
00:32:10,898 --> 00:32:14,568
<c.magenta>另外 利用版本键</c>


580
00:32:14,635 --> 00:32:16,737
<c.magenta>你还可以进行本地版本控制</c>


581
00:32:20,741 --> 00:32:23,577
<c.magenta>HealthKit会为你管理</c>
<c.magenta>所有版本冲突</c>


582
00:32:23,911 --> 00:32:25,579
<c.magenta>在保存和同步的时候</c>


583
00:32:27,114 --> 00:32:30,417
<c.magenta>还有 所有使用同步标识符完成的操作</c>


584
00:32:30,484 --> 00:32:31,652
<c.magenta>都是安全的交易</c>


585
00:32:32,052 --> 00:32:33,987
<c.magenta>这就意味着如果有任何的错误</c>


586
00:32:34,288 --> 00:32:37,357
<c.magenta>你的数据都会是处于一致的状态</c>


587
00:32:39,092 --> 00:32:42,329
<c.magenta>最后 与父对象的关系被保留了</c>


588
00:32:42,696 --> 00:32:45,732
<c.magenta>如果你替换的是与</c>
<c.magenta>HKWorkout有关的样本</c>


589
00:32:45,799 --> 00:32:47,167
<c.magenta>或跟HKCorrelation有关</c>


590
00:32:47,234 --> 00:32:49,236
<c.magenta>那么替换后的样本仍然与</c>


591
00:32:49,303 --> 00:32:51,572
<c.magenta>HKWorkout</c>
<c.magenta>或者HKCorrelation有关</c>


592
00:32:55,609 --> 00:32:58,412
<c.magenta>现在让我们看下如何使用同步标识符</c>


593
00:32:58,478 --> 00:33:01,048
<c.magenta>让我们的应用变得完全独立</c>


594
00:33:01,548 --> 00:33:05,352
<c.magenta>假设我们的手机上有一个锻炼应用</c>
<c.magenta>还有一个WatchKit扩展</c>


595
00:33:05,552 --> 00:33:07,321
<c.magenta>我们需要用到一个远程服务器</c>


596
00:33:07,387 --> 00:33:10,924
<c.magenta>在锻炼结束后进行一些额外的处理</c>


597
00:33:12,726 --> 00:33:15,395
<c.magenta>用户会在锻炼时使用手表</c>


598
00:33:15,462 --> 00:33:17,898
<c.magenta>而我们的应用会将数据</c>
<c.magenta>存入到HealthKit中</c>


599
00:33:18,165 --> 00:33:19,867
<c.magenta>我们要使用一个随机同步标识符</c>


600
00:33:19,933 --> 00:33:23,337
<c.magenta>因为这是初始版本</c>
<c.magenta>我们就把它叫作版本1</c>


601
00:33:24,938 --> 00:33:28,509
<c.magenta>在保存之后</c>
<c.magenta>我们的手表会把收据直接上传到云端</c>


602
00:33:30,911 --> 00:33:35,516
<c.magenta>HealthKit会发现有新数据</c>
<c.magenta>并且将其同步到我们的设备上</c>


603
00:33:37,484 --> 00:33:40,053
<c.magenta>现在我们的两个设备就都有这个样本了</c>


604
00:33:42,890 --> 00:33:45,392
<c.magenta>接着不久后 我们的云端处理完数据</c>


605
00:33:45,459 --> 00:33:47,694
<c.magenta>这时候我们把它叫作版本2</c>


606
00:33:50,964 --> 00:33:52,833
<c.magenta>我们的手机发现了云端的新数据</c>


607
00:33:52,900 --> 00:33:55,302
<c.magenta>决定将它下载并</c>
<c.magenta>保存到HealthKit中</c>


608
00:33:55,369 --> 00:33:58,138
<c.magenta>我们还是用和之前一样的同步标识符</c>


609
00:33:58,205 --> 00:34:00,407
<c.magenta>不过这次我们要把它的版本设为2</c>


610
00:34:02,576 --> 00:34:04,311
<c.magenta>因为我们使用了同步标识符</c>


611
00:34:04,378 --> 00:34:06,213
<c.magenta>HealthKit</c>
<c.magenta>会首先查找现有的样本</c>


612
00:34:06,280 --> 00:34:07,581
<c.magenta>来匹配该标识符</c>


613
00:34:07,681 --> 00:34:10,516
<c.magenta>这里它找到了现有的样本是版本1</c>


614
00:34:10,784 --> 00:34:12,518
<c.magenta>而我们的新样本是版本2</c>


615
00:34:12,619 --> 00:34:15,989
<c.magenta>所以它就会删除现有的样本</c>
<c.magenta>并将其用新的样本进行替换</c>


616
00:34:17,056 --> 00:34:19,826
<c.magenta>HealthKit发现了这个新数据</c>


617
00:34:19,893 --> 00:34:21,094
<c.magenta>它就会进行一次同步</c>


618
00:34:25,299 --> 00:34:27,234
<c.magenta>因为我们使用了同步标识符</c>


619
00:34:27,367 --> 00:34:30,070
<c.magenta>在同步过程中</c>
<c.magenta>HealthKit还是会查找现有的样本</c>


620
00:34:30,137 --> 00:34:31,505
<c.magenta>来匹配该同步标识符</c>


621
00:34:31,938 --> 00:34:34,007
<c.magenta>在本例中 它找到了最初的样本</c>


622
00:34:34,440 --> 00:34:36,376
<c.magenta>发现我们的新样本是版本2后</c>


623
00:34:36,443 --> 00:34:39,580
<c.magenta>它就删除了初始的样本并将其</c>
<c.magenta>用我们的新样本进行替换</c>


624
00:34:40,880 --> 00:34:43,817
<c.magenta>如我们所预期的那样</c>
<c.magenta>在我们的所有设备上都只有一个样本</c>


625
00:34:43,884 --> 00:34:46,719
<c.magenta>HealthKit会为我们解决</c>
<c.magenta>所有的版本冲突问题</c>


626
00:34:49,389 --> 00:34:51,324
<c.magenta>由于你的应用是完全独立的</c>


627
00:34:51,391 --> 00:34:52,993
<c.magenta>手表就不需要知道</c>


628
00:34:53,060 --> 00:34:55,228
<c.magenta>手机是不是已经下载了数据</c>


629
00:34:55,661 --> 00:34:58,599
<c.magenta>我们的手表应用发现了云端的新数据</c>


630
00:34:58,665 --> 00:35:00,501
<c.magenta>然后将其下载</c>
<c.magenta>并保存到HealthKit中</c>


631
00:35:00,634 --> 00:35:02,569
<c.magenta>我们会使用同样的同步标识符</c>


632
00:35:02,636 --> 00:35:04,738
<c.magenta>我们会辨识出又是版本2</c>


633
00:35:06,740 --> 00:35:09,610
<c.magenta>在这里 HealthKit发现现有样本</c>


634
00:35:09,676 --> 00:35:12,012
<c.magenta>有着相同的标识符和版本号</c>


635
00:35:12,346 --> 00:35:13,614
<c.magenta>所以这个样本就被忽略掉了</c>


636
00:35:16,216 --> 00:35:19,319
<c.magenta>如我们所预期的那样</c>
<c.magenta>我们所有的设备上都只有一个样本</c>


637
00:35:19,386 --> 00:35:22,055
<c.magenta>HealthKit</c>
<c.magenta>会为我们解决所有的版本冲突问题</c>


638
00:35:24,558 --> 00:35:27,661
<c.magenta>现在我们的应用就能随时上传 下载</c>
<c.magenta>并同步内容了</c>


639
00:35:27,728 --> 00:35:29,329
<c.magenta>我们不需要担心任何问题</c>


640
00:35:29,396 --> 00:35:31,865
<c.magenta>HealthKit会为我们解决</c>
<c.magenta>所有的版本冲突问题</c>


641
00:35:31,932 --> 00:35:34,601
<c.magenta>还有所有需要解决的复杂问题</c>


642
00:35:37,504 --> 00:35:40,407
<c.magenta>亚历克萨刚刚在Speedy Sloth中</c>
<c.magenta>添加了锻炼路径</c>


643
00:35:41,008 --> 00:35:43,677
<c.magenta>现在我要演示下如何更新这条路线</c>


644
00:35:45,579 --> 00:35:49,349
<c.magenta>一个常见的例子就是</c>
<c.magenta>做某些额外的处理</c>


645
00:35:49,416 --> 00:35:50,884
<c.magenta>像是使路线更平滑</c>


646
00:35:50,951 --> 00:35:52,953
<c.magenta>然后我们更新下路线</c>


647
00:35:53,420 --> 00:35:55,355
<c.magenta>首先我进入Speedy Sloth</c>


648
00:35:56,990 --> 00:36:00,994
<c.magenta>早些时候我在Speedy Sloth中</c>
<c.magenta>加入了这个新功能 树懒化锻炼</c>


649
00:36:02,729 --> 00:36:05,232
<c.magenta>意思就是我们的原始路线</c>


650
00:36:05,299 --> 00:36:07,467
<c.magenta>会被改成我们要路过沿途的每棵树</c>


651
00:36:07,534 --> 00:36:08,669
<c.magenta>就像是树懒一样</c>


652
00:36:11,939 --> 00:36:14,541
<c.magenta>让我们看下如何实现此方法</c>


653
00:36:14,608 --> 00:36:18,245
<c.magenta>首先我们要看下配置界面控制器</c>


654
00:36:20,347 --> 00:36:23,684
<c.magenta>在这个类中 我们有个叫</c>
<c.magenta>updateWorkoutRoute的方法</c>


655
00:36:24,785 --> 00:36:27,821
<c.magenta>此方法需要传入一个锻炼</c>
<c.magenta>该锻炼的一条路线</c>


656
00:36:27,888 --> 00:36:29,623
<c.magenta>还有那条路线的所有位置信息</c>


657
00:36:30,157 --> 00:36:32,826
<c.magenta>在下面我已经实现了所有需要的查询</c>


658
00:36:32,893 --> 00:36:34,061
<c.magenta>来收集这些数据</c>


659
00:36:34,728 --> 00:36:36,363
<c.magenta>我们点击下树懒化锻炼按钮</c>


660
00:36:36,430 --> 00:36:39,166
<c.magenta>它就会收集所有这些数据</c>
<c.magenta>并将数据传到这个方法里</c>


661
00:36:42,236 --> 00:36:44,671
<c.magenta>有了这些从初始锻炼中</c>
<c.magenta>收集到的原始位置信息</c>


662
00:36:44,738 --> 00:36:47,708
<c.magenta>接下来我们把它传入</c>
<c.magenta>slothifyRouteLocations这个方法</c>


663
00:36:47,841 --> 00:36:49,743
<c.magenta>此方法会传入我们的位置信息</c>


664
00:36:49,810 --> 00:36:52,446
<c.magenta>找到所有的树</c>
<c.magenta>然后相应地调整我们的路线</c>


665
00:36:53,514 --> 00:36:55,282
<c.magenta>现在我们就有新的位置信息了</c>


666
00:36:56,083 --> 00:36:57,985
<c.magenta>接下来我们要创建一个新的锻炼路径</c>


667
00:36:58,051 --> 00:36:59,686
<c.magenta>并将它与我们的锻炼相关联</c>


668
00:37:00,120 --> 00:37:04,291
<c.magenta>要实现这个目的 首先我们要创建一个</c>
<c.magenta>HKWorkoutRouteBuilder</c>


669
00:37:06,159 --> 00:37:08,061
<c.magenta>我们同样需要传入healthStore</c>


670
00:37:08,128 --> 00:37:10,163
<c.magenta>还有一个表示我们本地资源的nil设备</c>


671
00:37:11,965 --> 00:37:13,467
<c.magenta>要插入这些位置信息</c>


672
00:37:15,135 --> 00:37:17,738
<c.magenta>我们需要在WorkoutRouteBuilder上</c>
<c.magenta>调用insertRouteData方法</c>


673
00:37:17,804 --> 00:37:18,972
<c.magenta>并传入我们的新位置信息</c>


674
00:37:21,108 --> 00:37:23,410
<c.magenta>我们要保证此方法成功了</c>


675
00:37:23,477 --> 00:37:24,645
<c.magenta>而一旦这些都实现了</c>


676
00:37:24,711 --> 00:37:27,614
<c.magenta>我们就可以结束初始锻炼中的路线</c>


677
00:37:29,883 --> 00:37:31,385
<c.magenta>让我们看个例子吧</c>


678
00:37:36,723 --> 00:37:38,192
<c.magenta>这里是亚历克萨的初始路线</c>


679
00:37:44,932 --> 00:37:46,733
<c.magenta>让我们树懒化这条路线</c>


680
00:38:07,020 --> 00:38:07,855
<c.magenta>好了</c>


681
00:38:10,858 --> 00:38:13,994
<c.magenta>正如你所见</c>
<c.magenta>初始路线被树懒化了</c>


682
00:38:14,061 --> 00:38:15,629
<c.magenta>然后被应用到锻炼中</c>


683
00:38:16,430 --> 00:38:19,233
<c.magenta>不过初始路线还在那里</c>


684
00:38:19,800 --> 00:38:22,236
<c.magenta>我们现在要做的就是删除初始路线</c>


685
00:38:22,603 --> 00:38:25,539
<c.magenta>然后添加我们的新路线</c>
<c.magenta>这有点复杂</c>


686
00:38:25,606 --> 00:38:28,075
<c.magenta>我们需要保证数据被正确同步了</c>


687
00:38:28,141 --> 00:38:30,277
<c.magenta>而且它还不是特别安全的交易</c>


688
00:38:31,044 --> 00:38:34,581
<c.magenta>为了能简单地实现这个功能</c>
<c.magenta>我要使用同步标识符</c>


689
00:38:35,983 --> 00:38:39,386
<c.magenta>首先我回到刚开始创建锻炼路线的地方</c>


690
00:38:40,988 --> 00:38:42,322
<c.magenta>在这个保存锻炼方法内</c>


691
00:38:43,223 --> 00:38:45,392
<c.magenta>在我们初始保存了锻炼后</c>


692
00:38:45,459 --> 00:38:47,294
<c.magenta>以及结束路线之前</c>


693
00:38:47,794 --> 00:38:50,163
<c.magenta>我要添加一些同步标识符元数据</c>


694
00:39:02,342 --> 00:39:04,678
<c.magenta>首先 我要创建一个元数据字典</c>


695
00:39:06,280 --> 00:39:09,616
<c.magenta>接着 我要把同步标识符的</c>
<c.magenta>元数据键设定为</c>


696
00:39:09,683 --> 00:39:11,985
<c.magenta>字符串表示的UUID值</c>


697
00:39:13,253 --> 00:39:16,924
<c.magenta>然后我把同步版本设为版本1</c>


698
00:39:16,990 --> 00:39:18,592
<c.magenta>因为这是我们的初始路线</c>


699
00:39:19,560 --> 00:39:21,228
<c.magenta>在创建了元数据之后</c>


700
00:39:21,895 --> 00:39:23,931
<c.magenta>我们将其传入</c>
<c.magenta>finishRoute方法</c>


701
00:39:23,997 --> 00:39:27,801
<c.magenta>这样当我们将其存入锻炼时</c>
<c.magenta>它就会和锻炼路线相关联了</c>


702
00:39:29,069 --> 00:39:31,405
<c.magenta>接着我们回来配置界面控制器</c>


703
00:39:31,805 --> 00:39:33,540
<c.magenta>也就是我们更新锻炼路径的地方</c>


704
00:39:35,709 --> 00:39:38,579
<c.magenta>为了使用同步标识符 我们还需要将</c>


705
00:39:38,645 --> 00:39:42,349
<c.magenta>相同的同步标识符元数据</c>
<c.magenta>添加到我们更新后的路线中</c>


706
00:39:43,617 --> 00:39:45,385
<c.magenta>首先我们需要抓取同步标识符</c>


707
00:39:45,452 --> 00:39:47,855
<c.magenta>也就是我们在初始路线上</c>
<c.magenta>所使用的同步标识符</c>


708
00:39:48,555 --> 00:39:50,757
<c.magenta>为防我们的路线没有任何元数据</c>


709
00:39:50,824 --> 00:39:52,559
<c.magenta>我们需要定义一个默认值</c>


710
00:39:54,361 --> 00:39:56,630
<c.magenta>接着我们要创建一个元数据字典</c>


711
00:39:58,799 --> 00:40:00,567
<c.magenta>这里我们创建了词典</c>


712
00:40:00,634 --> 00:40:05,005
<c.magenta>然后将这些新的同步标识符</c>
<c.magenta>赋给了那些初始的</c>


713
00:40:05,739 --> 00:40:09,910
<c.magenta>然后我们要用的同步版本为2</c>
<c.magenta>因为这是我们更新后的路线</c>


714
00:40:11,311 --> 00:40:14,181
<c.magenta>让我们把元数据传入</c>
<c.magenta>finishRoute这个方法</c>


715
00:40:14,248 --> 00:40:17,484
<c.magenta>这样在元数据被保存在锻炼中的时候</c>
<c.magenta>就可以与锻炼路径相关联了</c>


716
00:40:18,151 --> 00:40:20,521
<c.magenta>接着HealthKit</c>
<c.magenta>会替换我们的初始路线</c>


717
00:40:21,154 --> 00:40:22,923
<c.magenta>让我们看个实例吧</c>


718
00:40:34,201 --> 00:40:36,537
<c.magenta>首先让我们实现一个新锻炼</c>


719
00:40:38,372 --> 00:40:41,575
<c.magenta>当我们保存这个锻炼时</c>
<c.magenta>它会包含同步标识符元数据</c>


720
00:40:42,643 --> 00:40:46,680
<c.magenta>当我们走了几米</c>
<c.magenta>消耗了一定的卡路里之后</c>


721
00:40:46,747 --> 00:40:49,783
<c.magenta>我们就要停止锻炼</c>
<c.magenta>并将其存入HealthKit</c>


722
00:40:55,956 --> 00:40:57,624
<c.magenta>我们可以在这里看到初始路线</c>


723
00:40:58,025 --> 00:41:00,627
<c.magenta>让我们回到树懒化这条路线</c>


724
00:41:15,375 --> 00:41:17,244
<c.magenta>好了 如你所见</c>


725
00:41:17,311 --> 00:41:19,613
<c.magenta>初始路线就被我们的新路线替换掉了</c>


726
00:41:19,847 --> 00:41:22,082
<c.magenta>我们只需要加入几个元数据键</c>


727
00:41:22,149 --> 00:41:24,952
<c.magenta>HealthKit会为我们处理</c>
<c.magenta>所有的版本冲突问题</c>


728
00:41:26,687 --> 00:41:29,723
<c.magenta>现在你们都看到了</c>
<c.magenta>处理冲突是多么的简单</c>


729
00:41:29,790 --> 00:41:32,492
<c.magenta>只要利用好HealthKit中</c>
<c.magenta>新的高级功能就行了</c>


730
00:41:34,328 --> 00:41:37,331
<c.magenta>现在让我介绍一下样本源信息</c>


731
00:41:38,198 --> 00:41:41,235
<c.magenta>你们要注意</c>
<c.magenta>从HealthKit显示数据的时候</c>


732
00:41:41,668 --> 00:41:43,837
<c.magenta>该数据的来源</c>


733
00:41:44,771 --> 00:41:49,009
<c.magenta>当你查询数据的时候</c>
<c.magenta>样本会包含一个HKSourceRevision</c>


734
00:41:49,243 --> 00:41:51,345
<c.magenta>HKSourceRevision</c>
<c.magenta>包含了应用和设备</c>


735
00:41:51,411 --> 00:41:55,449
<c.magenta>也就是这些应用和设备</c>
<c.magenta>将样本存入了HealthKit</c>


736
00:41:56,617 --> 00:42:01,255
<c.magenta>在iOS 11和watchOS 4中</c>
<c.magenta>我们加入了一些新的属性和常量</c>


737
00:42:01,321 --> 00:42:04,958
<c.magenta>这样你就能对从HealthKit</c>
<c.magenta>获得的显示数据有更深入了解</c>


738
00:42:07,561 --> 00:42:11,031
<c.magenta>在iOS 10中 HKSourceRevision</c>
<c.magenta>包括了源</c>


739
00:42:11,665 --> 00:42:15,802
<c.magenta>作为HK源</c>
<c.magenta>以及NSString格式的应用版本</c>


740
00:42:18,438 --> 00:42:19,973
<c.magenta>首先 我们加入了产品类型</c>


741
00:42:20,340 --> 00:42:22,142
<c.magenta>产品类型是一种字符串形式表现的</c>


742
00:42:22,209 --> 00:42:25,312
<c.magenta>设备名 也就是这个设备</c>
<c.magenta>将样本存入到HealthKit</c>


743
00:42:25,479 --> 00:42:28,081
<c.magenta>如果你在Watch Series 2上</c>
<c.magenta>保存某个样本</c>


744
00:42:28,148 --> 00:42:29,950
<c.magenta>就会是这个样子 “watch2,4”</c>


745
00:42:31,185 --> 00:42:33,520
<c.magenta>然后我们加入了操作系统版本</c>


746
00:42:34,021 --> 00:42:36,623
<c.magenta>它就是设备上所运行的操作系统</c>


747
00:42:36,690 --> 00:42:38,559
<c.magenta>当把样本</c>
<c.magenta>存入HealthKit的时候</c>


748
00:42:39,393 --> 00:42:43,263
<c.magenta>如果我们使用</c>
<c.magenta>watchOS 4.0保存样本</c>


749
00:42:43,330 --> 00:42:45,566
<c.magenta>就会返回 “4,0,0”</c>


750
00:42:47,868 --> 00:42:49,870
<c.magenta>我们还添加了三个新的常量</c>


751
00:42:49,937 --> 00:42:53,073
<c.magenta>这些常量是</c>
<c.magenta>HKSourceRevisionAnyVersion</c>


752
00:42:53,373 --> 00:42:55,375
<c.magenta>HKSourceRevisionAnyProductType</c>


753
00:42:55,609 --> 00:42:58,212
<c.magenta>还有</c>
<c.magenta>HKSourceRevisionAnyOperatingSystem</c>


754
00:42:58,812 --> 00:43:01,048
<c.magenta>当你为查询数据而新建断言的时候</c>


755
00:43:02,015 --> 00:43:06,220
<c.magenta>这其中就包含了HKSourceRevision</c>
<c.magenta>你必须全部声明这三个常量</c>


756
00:43:06,587 --> 00:43:08,155
<c.magenta>你可以用这些常量来</c>


757
00:43:08,222 --> 00:43:11,158
<c.magenta>获得一个更细致的断言</c>


758
00:43:11,225 --> 00:43:15,362
<c.magenta>例如 对于某个特定产品类型</c>
<c.magenta>可以使用任何操作系统</c>


759
00:43:16,530 --> 00:43:20,367
<c.magenta>通过这些新信息</c>
<c.magenta>你可以获得更深入的理解</c>


760
00:43:20,434 --> 00:43:22,569
<c.magenta>对于你应用中所显示的数据</c>


761
00:43:26,039 --> 00:43:26,940
<c.magenta>（支持糖尿病管理）</c>


762
00:43:27,007 --> 00:43:28,542
<c.magenta>好了 最后是</c>


763
00:43:29,243 --> 00:43:31,512
<c.magenta>HealthKit中支持的糖尿病管理</c>


764
00:43:33,947 --> 00:43:37,784
<c.magenta>我们的用户喜欢使用Apple产品</c>
<c.magenta>来帮他们掌握身体情况</c>


765
00:43:39,319 --> 00:43:42,723
<c.magenta>现在在HealthKit中</c>
<c.magenta>我们支持了追踪血糖样本</c>


766
00:43:42,789 --> 00:43:46,059
<c.magenta>追踪碳水化合物和所有活动数据</c>


767
00:43:46,260 --> 00:43:48,729
<c.magenta>这些对于控制糖尿病很有帮助</c>


768
00:43:49,429 --> 00:43:52,466
<c.magenta>我们知道还缺失一些功能</c>
<c.magenta>现在我很高兴地宣布</c>


769
00:43:52,533 --> 00:43:56,436
<c.magenta>我们已经添加了新的功能来完善它</c>


770
00:44:00,340 --> 00:44:04,178
<c.magenta>首先 我们加入了追踪相对用餐时间</c>


771
00:44:04,244 --> 00:44:05,512
<c.magenta>和血糖样本的对应关系</c>


772
00:44:06,813 --> 00:44:10,117
<c.magenta>然后 我们加入了胰岛素注射追踪</c>


773
00:44:12,819 --> 00:44:15,389
<c.magenta>作为watchOS 4里</c>
<c.magenta>CoreBluetooth新特性</c>


774
00:44:15,455 --> 00:44:17,691
<c.magenta>你的蓝牙现在可以让糖尿病设备</c>


775
00:44:17,758 --> 00:44:19,927
<c.magenta>直接连到你的手表上</c>


776
00:44:21,261 --> 00:44:24,364
<c.magenta>请观看“CoreBluetooth新特性”</c>
<c.magenta>以获得更多信息</c>


777
00:44:25,566 --> 00:44:28,268
<c.magenta>为了支持相对血糖用餐时间</c>


778
00:44:28,335 --> 00:44:29,736
<c.magenta>我们添加了一个新的元数据键</c>


779
00:44:30,237 --> 00:44:34,007
<c.magenta>这个元数据键叫作</c>
<c.magenta>HKMetadataKeyBloodGlucoseMealTime</c>


780
00:44:34,074 --> 00:44:37,377
<c.magenta>你可以在保存血糖样本的时候</c>
<c.magenta>使用这个元数据键</c>


781
00:44:38,378 --> 00:44:41,014
<c.magenta>这个元数据键支持两种值</c>


782
00:44:41,548 --> 00:44:45,152
<c.magenta>你可以在HKBloodGlucoseMealTime</c>
<c.magenta>这个枚举中找到这两个值</c>


783
00:44:45,519 --> 00:44:48,155
<c.magenta>这两个值就是餐前和餐后</c>


784
00:44:48,822 --> 00:44:51,391
<c.magenta>餐前表示的是饭前的任意时间</c>


785
00:44:51,458 --> 00:44:54,328
<c.magenta>餐后表示的是饭后的任意时间</c>


786
00:44:57,464 --> 00:44:59,833
<c.magenta>通过这个新数据</c>
<c.magenta>你就可以更深入地了解</c>


787
00:44:59,900 --> 00:45:03,403
<c.magenta>用户上顿吃饭与血糖样本的对应关系</c>


788
00:45:03,904 --> 00:45:07,107
<c.magenta>现在让我们看一下</c>
<c.magenta>HealthKit中的胰岛素注射支持</c>


789
00:45:07,908 --> 00:45:10,110
<c.magenta>这里有张HealthKit的图表</c>


790
00:45:11,578 --> 00:45:13,981
<c.magenta>对应的是所有插入到</c>
<c.magenta>Health应用的数据</c>


791
00:45:16,250 --> 00:45:17,351
<c.magenta>为了支持这个新类型</c>


792
00:45:17,417 --> 00:45:19,753
<c.magenta>我们添加了一个新的计量类型标识符</c>


793
00:45:19,853 --> 00:45:22,623
<c.magenta>它叫作 HKQuantityTypeIdentifier</c>
<c.magenta>insulinDelivery</c>


794
00:45:23,490 --> 00:45:28,662
<c.magenta>你想向这个计量类型添加样本时</c>
<c.magenta>必须包括注射的原因</c>


795
00:45:29,296 --> 00:45:31,131
<c.magenta>为了实现这个功能 你应该使用</c>


796
00:45:31,198 --> 00:45:34,668
<c.magenta>HKMetadataKeyInsulin</c>
<c.magenta>DeliveryReasonMetadata</c>


797
00:45:35,669 --> 00:45:37,905
<c.magenta>这个元数据支持两个值</c>


798
00:45:38,839 --> 00:45:41,875
<c.magenta>你可以在HKInsulinDeliverReason</c>
<c.magenta>这个枚举中找到这两个值</c>


799
00:45:43,243 --> 00:45:45,512
<c.magenta>这两个值就是basal和bolus</c>


800
00:45:46,313 --> 00:45:49,116
<c.magenta>basal就是你每天所需的基础代谢量</c>


801
00:45:49,183 --> 00:45:51,919
<c.magenta>而bolus就是某一段时间内的需求量</c>
<c.magenta>像是一顿饭</c>


802
00:45:51,985 --> 00:45:53,453
<c.magenta>它还会纠正高血糖</c>


803
00:45:55,455 --> 00:45:58,525
<c.magenta>值得注意的是 你只能加入这三种样本</c>


804
00:45:58,592 --> 00:46:00,394
<c.magenta>在用户注射胰岛素之后</c>


805
00:46:02,496 --> 00:46:06,133
<c.magenta>当利用这个标识符创建HK样本时</c>


806
00:46:06,200 --> 00:46:08,068
<c.magenta>你应该使用国际单位</c>


807
00:46:09,570 --> 00:46:11,171
<c.magenta>为了支持国际单位</c>


808
00:46:11,238 --> 00:46:15,776
<c.magenta>或者说IU 我们已经扩展了HKUnit</c>
<c.magenta>现在它可以返回国际单位了</c>


809
00:46:16,677 --> 00:46:17,744
<c.magenta>国际单位</c>


810
00:46:17,811 --> 00:46:20,647
<c.magenta>就是物质的生物学有效性</c>


811
00:46:22,149 --> 00:46:23,951
<c.magenta>它所表示的不是一个特定的数量</c>


812
00:46:24,017 --> 00:46:25,986
<c.magenta>而是生物有效性</c>


813
00:46:26,053 --> 00:46:27,688
<c.magenta>对于所注射的计量而言</c>


814
00:46:29,289 --> 00:46:33,293
<c.magenta>值得注意的是</c>
<c.magenta>这个单位不能被转换为其他单位</c>


815
00:46:33,360 --> 00:46:36,930
<c.magenta>不过它支持常见的一些SI前缀</c>
<c.magenta>像是千和微</c>


816
00:46:40,000 --> 00:46:43,604
<c.magenta>让我们来看下</c>
<c.magenta>如何插入一个胰岛素注射样本</c>


817
00:46:44,638 --> 00:46:49,676
<c.magenta>比方说 我们通过胰岛素泵</c>
<c.magenta>注射了0.85个单位的基础胰岛素</c>


818
00:46:49,743 --> 00:46:50,677
<c.magenta>在过去的一小时内</c>


819
00:46:51,912 --> 00:46:54,081
<c.magenta>首先让我们用insulinDelivery</c>
<c.magenta>这个标识符</c>


820
00:46:54,147 --> 00:46:56,316
<c.magenta>来创建一个HKQuantityType</c>


821
00:46:59,152 --> 00:47:01,221
<c.magenta>接着我们创建了一个</c>
<c.magenta>HKQuantity</c>


822
00:47:01,288 --> 00:47:05,526
<c.magenta>使用了国际单位以及</c>
<c.magenta>双精度浮点值0.825</c>


823
00:47:08,262 --> 00:47:10,931
<c.magenta>然后 我们创建了一个</c>
<c.magenta>HKQuantitySample</c>


824
00:47:11,265 --> 00:47:14,801
<c.magenta>我们还要用到前面讲到过的</c>
<c.magenta>计量类型与计量</c>


825
00:47:15,536 --> 00:47:19,640
<c.magenta>我们要把开始和结束时间设定为</c>
<c.magenta>胰岛素泵注射胰岛素的起始时间</c>


826
00:47:20,674 --> 00:47:23,243
<c.magenta>然后我们要记得写入需要的元数据</c>


827
00:47:23,310 --> 00:47:26,246
<c.magenta>来记录注射原因</c>
<c.magenta>在本例中 这里是basal</c>


828
00:47:28,315 --> 00:47:30,117
<c.magenta>当样本被创建好以后</c>


829
00:47:30,184 --> 00:47:34,254
<c.magenta>我们可以通过将其传入healthStore中</c>
<c.magenta>的save方法来保存到HealthKit</c>


830
00:47:35,455 --> 00:47:37,791
<c.magenta>这样一个胰岛素注射样本</c>
<c.magenta>就被保存到HealthKit了</c>


831
00:47:37,858 --> 00:47:40,460
<c.magenta>你的应用还有</c>
<c.magenta>所有其他的应用都可以使用它</c>


832
00:47:40,527 --> 00:47:42,262
<c.magenta>来帮助用户控制糖尿病</c>


833
00:47:45,732 --> 00:47:49,369
<c.magenta>我们还可以从HealthKit中</c>
<c.magenta>取出已经保存的样本</c>


834
00:47:49,436 --> 00:47:51,638
<c.magenta>为了实现这个功能</c>
<c.magenta>我们需要对所有基础样本</c>


835
00:47:51,705 --> 00:47:52,906
<c.magenta>执行一次统计数据查询</c>


836
00:47:53,307 --> 00:47:56,977
<c.magenta>我对每个给用户注射的</c>
<c.magenta>基础样本都感兴趣</c>


837
00:47:57,044 --> 00:47:58,545
<c.magenta>每小时我都想看一下</c>


838
00:47:59,646 --> 00:48:01,949
<c.magenta>首先 我们需要新建一个断言</c>


839
00:48:02,015 --> 00:48:03,750
<c.magenta>我们会以元数据键作为基础</c>


840
00:48:03,817 --> 00:48:06,753
<c.magenta>此元数据键为insulinDeliveryReason</c>
<c.magenta>并且我们会传入基础</c>


841
00:48:06,820 --> 00:48:09,056
<c.magenta>因为这是我们感兴趣的类型</c>


842
00:48:11,191 --> 00:48:13,126
<c.magenta>接下来我们要定义计量类型</c>


843
00:48:13,193 --> 00:48:14,661
<c.magenta>就像我们之前做的那样</c>


844
00:48:14,728 --> 00:48:17,798
<c.magenta>我们要用到的是</c>
<c.magenta>insulinDelivery这个计量类型标识符</c>


845
00:48:19,566 --> 00:48:22,769
<c.magenta>然后我们要新建一个</c>
<c.magenta>HK统计数据集合查询</c>


846
00:48:22,836 --> 00:48:26,507
<c.magenta>我们要传入计量类型和</c>
<c.magenta>前面定义好的断言</c>


847
00:48:27,508 --> 00:48:29,810
<c.magenta>然后我们要传入一些选项</c>


848
00:48:29,877 --> 00:48:32,112
<c.magenta>就是cumulativeSum</c>
<c.magenta>还有separateBySource</c>


849
00:48:32,613 --> 00:48:34,882
<c.magenta>你一定要传入</c>
<c.magenta>separateBySource</c>


850
00:48:34,948 --> 00:48:37,184
<c.magenta>因为HealthKit一般</c>


851
00:48:37,251 --> 00:48:40,554
<c.magenta>只会返回一个特定时间段之内的样本</c>


852
00:48:41,154 --> 00:48:42,389
<c.magenta>因为用户可能会</c>


853
00:48:42,456 --> 00:48:45,058
<c.magenta>超过一个小时才注射胰岛素</c>


854
00:48:45,125 --> 00:48:48,762
<c.magenta>或是人工注射</c>
<c.magenta>而这些时间段是会重叠的</c>


855
00:48:48,896 --> 00:48:51,665
<c.magenta>因此我们需要使用separateBySource</c>
<c.magenta>来获取全部的信息</c>


856
00:48:53,100 --> 00:48:55,702
<c.magenta>接下来我感兴趣的是所有的基础样本</c>


857
00:48:56,203 --> 00:48:58,739
<c.magenta>对于这里的锚日期</c>
<c.magenta>我所使用的是Date.distantPast</c>


858
00:49:00,307 --> 00:49:02,576
<c.magenta>然后 为了表明是每个小时一检查</c>


859
00:49:02,643 --> 00:49:06,213
<c.magenta>我会把小时数为1的DateComponents</c>
<c.magenta>传给intervalComponents</c>


860
00:49:08,916 --> 00:49:10,150
<c.magenta>现在我的查询已经创建好了</c>


861
00:49:10,217 --> 00:49:12,319
<c.magenta>我就可以接着创建我的</c>
<c.magenta>initialResultsHandler</c>


862
00:49:12,819 --> 00:49:14,821
<c.magenta>而从这个处理器返回的结果</c>


863
00:49:14,888 --> 00:49:17,658
<c.magenta>就包括了所有我们需要总结的信息</c>


864
00:49:17,724 --> 00:49:19,593
<c.magenta>以便找出我们需要的信息</c>


865
00:49:21,862 --> 00:49:23,363
<c.magenta>最后 我要执行这条查询</c>


866
00:49:23,430 --> 00:49:26,333
<c.magenta>通过将其传入healthStore</c>
<c.magenta>中的执行方法</c>


867
00:49:27,935 --> 00:49:30,571
<c.magenta>现在你就知道如何插入并取回样本了</c>


868
00:49:35,609 --> 00:49:38,445
<c.magenta>今天我们讲了许多</c>
<c.magenta>HealthKit的新功能</c>


869
00:49:40,147 --> 00:49:43,050
<c.magenta>首先 你们了解了一些</c>
<c.magenta>新数据类型和活动类型</c>


870
00:49:43,116 --> 00:49:46,053
<c.magenta>这会让你的锻炼应用更上一层楼</c>


871
00:49:49,790 --> 00:49:52,826
<c.magenta>然后你学习了新的</c>
<c.magenta>WorkoutRouteBuilder API</c>


872
00:49:53,327 --> 00:49:55,162
<c.magenta>它可以让你记录锻炼路线</c>


873
00:49:55,229 --> 00:49:56,897
<c.magenta>并与锻炼相关联</c>


874
00:49:58,565 --> 00:50:00,834
<c.magenta>之后我们引入了同步标识符的概念</c>


875
00:50:01,335 --> 00:50:05,072
<c.magenta>现在你就可以利用</c>
<c.magenta>HealthKit来管理</c>


876
00:50:05,138 --> 00:50:07,808
<c.magenta>和防止所有跨设备的数据复制了</c>


877
00:50:10,377 --> 00:50:15,315
<c.magenta>最后 我们添加了</c>
<c.magenta>对于用户控制糖尿病的支持</c>


878
00:50:20,120 --> 00:50:23,857
<c.magenta>要了解更多内容以及</c>
<c.magenta>下载完整版Speedy Sloth</c>


879
00:50:23,924 --> 00:50:25,058
<c.magenta>请访问这个链接</c>


880
00:50:34,334 --> 00:50:36,537
<c.magenta>我们有些推荐的相关演讲</c>


881
00:50:37,604 --> 00:50:39,339
<c.magenta>谢谢 愿你们在WWDC</c>
<c.magenta>度过一段快乐时光</c>

